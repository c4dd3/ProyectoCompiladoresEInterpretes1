/* The following code was generated by JFlex 1.7.0 */

/* ================================== Sección 1: User code ================================== */
package com.mycompany.proyectocompi1;

/* ===== Corte de sección ===== */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\21\1\61\1\61\1\23\22\0\1\3\1\0\1\20"+
    "\4\0\1\22\1\6\1\10\1\7\1\54\1\60\1\17\1\15\1\60"+
    "\1\11\7\14\2\1\1\60\1\60\1\55\1\56\1\57\2\0\1\24"+
    "\1\42\1\46\1\26\1\16\1\13\1\45\1\40\1\33\1\51\1\53"+
    "\1\41\1\35\1\25\1\27\1\50\1\2\1\30\1\37\1\31\1\43"+
    "\1\34\1\47\1\12\1\44\1\2\1\60\1\0\1\60\1\60\2\0"+
    "\1\24\1\42\1\46\1\26\1\16\1\13\1\45\1\40\1\33\1\51"+
    "\1\53\1\41\1\35\1\25\1\27\1\50\1\2\1\30\1\37\1\31"+
    "\1\43\1\34\1\47\1\12\1\44\1\2\1\4\1\0\1\5\7\0"+
    "\1\61\252\0\2\32\115\0\1\36\u1ea8\0\1\61\1\61\u0100\0\1\52"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\3\5\1\2"+
    "\2\3\1\5\1\3\1\5\2\1\6\3\1\1\3\3"+
    "\1\1\10\3\3\5\3\0\1\6\1\7\1\6\1\3"+
    "\1\0\1\4\2\0\1\10\1\6\2\3\1\0\2\3"+
    "\1\11\3\3\1\0\1\12\1\13\2\0\1\14\1\0"+
    "\2\3\1\0\3\3\1\0\2\3\1\15\1\0\1\3"+
    "\1\15\1\5\4\3\1\15\1\5\1\0\1\5\1\3"+
    "\1\0\1\3\3\0\6\3\1\0\3\3\1\0\4\3"+
    "\1\0\1\16\2\0\1\3\1\0\1\17\2\15\1\0"+
    "\2\3\1\0\1\3\2\0\1\20\1\0\1\5\1\3"+
    "\1\0\1\3\1\0\6\3\3\0\3\3\1\0\1\3"+
    "\1\0\5\3\1\0\3\3\1\0\4\3\1\0\1\3"+
    "\1\6\1\7\2\0\1\3\1\0\1\3\1\15\1\3"+
    "\1\11\1\0\2\3\1\0\1\3\1\0\5\3\3\0"+
    "\3\3\1\0\1\3\1\0\2\3\1\0\1\3\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\1\16\1\0\1\3"+
    "\1\4\3\3\1\15\1\0\1\3\1\0\4\3\2\0"+
    "\3\3\1\0\1\3\1\0\1\3\2\15\1\0\1\3"+
    "\1\0\3\3\1\0\3\3\1\0\1\3\1\15\3\0"+
    "\10\3\1\15\3\3\1\0\1\3\3\0\6\3\1\15"+
    "\1\0\1\3\1\0\5\3\1\0\1\3\1\0\1\15"+
    "\3\3\1\15\1\0\3\3\1\0\1\3\1\15\5\3"+
    "\1\15\161\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\310\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0190\0\310\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8"+
    "\0\u0352\0\310\0\310\0\u0bea\0\u0c1c\0\310\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u092e\0\u092e\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\310\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u13ec\0\u141e\0\310\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u09f6\0\u14e6\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\310\0\u16da\0\u14e6\0\u170c\0\u173e\0\u1770"+
    "\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1e78"+
    "\0\u1f0e\0\u1f40\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u0960\0\u2616\0\u2648"+
    "\0\u267a\0\u25e4\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6"+
    "\0\u27d8\0\u280a\0\u283c\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936"+
    "\0\u2968\0\u299a\0\u203a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94"+
    "\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24"+
    "\0\u2ac6\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82"+
    "\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0"+
    "\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070"+
    "\0\u30a2\0\u30d4\0\u3106\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce"+
    "\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa\0\u332c\0\u3296"+
    "\0\u335e\0\u3390\0\u33c2\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u34ee\0\u348a\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8"+
    "\0\u35e8\0\u361a\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746"+
    "\0\u3778\0\u37aa\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6"+
    "\0\u3908\0\u393a\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66"+
    "\0\u3a98\0\u3aca\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6"+
    "\0\u3c28\0\u3c5a\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86"+
    "\0\u3db8\0\u3dea\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16"+
    "\0\u3f48\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6"+
    "\0\u40d8\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236"+
    "\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6"+
    "\0\u43f8\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556"+
    "\0\u4588\0\u45ba\0\u45ec\0\u461e\0\u4650\0\u4682\0\u46b4\0\u46e6"+
    "\0\u4718\0\u474a\0\u477c\0\u47ae\0\u47e0\0\u4812\0\u4844\0\u4876"+
    "\0\u48a8\0\u48da\0\u490c\0\u493e\0\u4970\0\u49a2\0\u49d4\0\u4a06"+
    "\0\u4a38\0\u4a6a\0\u4a9c\0\u4ace\0\u4b00\0\u4b32\0\u4b64\0\u4b96"+
    "\0\u4bc8\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\6\1\20\1\21\1\22"+
    "\1\23\1\10\1\24\1\10\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\7\1\41\1\42\1\43\1\7\1\44\1\45\1\46"+
    "\1\47\1\7\1\5\1\7\1\50\1\51\1\14\1\52"+
    "\1\14\21\0\1\53\62\0\1\54\62\0\1\55\122\0"+
    "\1\6\1\56\6\0\1\6\2\56\1\6\1\57\1\60"+
    "\5\0\6\56\1\0\3\56\1\0\13\56\1\0\1\56"+
    "\7\0\2\61\6\0\4\61\1\0\1\61\5\0\6\61"+
    "\1\0\3\61\1\0\13\61\1\0\1\61\11\0\1\10"+
    "\15\0\1\10\1\0\1\10\36\0\5\62\1\63\54\62"+
    "\7\0\1\64\61\0\1\14\53\0\1\65\1\56\6\0"+
    "\1\66\1\67\1\56\1\66\1\57\1\60\5\0\6\56"+
    "\1\0\3\56\1\0\13\56\1\0\1\56\7\0\2\61"+
    "\6\0\4\61\1\0\1\61\5\0\3\61\1\70\2\61"+
    "\1\0\3\61\1\0\13\61\1\0\1\61\7\0\2\61"+
    "\6\0\4\61\1\0\1\61\5\0\3\61\1\71\2\61"+
    "\1\72\1\73\2\61\1\0\4\61\1\74\6\61\1\0"+
    "\1\61\7\0\1\75\7\0\1\75\2\0\1\75\46\0"+
    "\2\61\6\0\1\61\1\76\2\61\1\0\1\61\5\0"+
    "\1\61\1\77\4\61\1\0\3\61\1\0\2\61\1\100"+
    "\10\61\1\0\1\61\25\0\1\14\42\0\20\101\1\102"+
    "\1\103\1\101\1\104\36\101\21\105\1\106\1\0\1\107"+
    "\36\105\1\0\2\61\6\0\4\61\1\0\1\61\5\0"+
    "\1\61\1\110\2\61\1\111\1\61\1\0\3\61\1\112"+
    "\1\113\2\61\1\114\7\61\1\0\1\61\7\0\2\61"+
    "\6\0\4\61\1\0\1\61\5\0\3\61\1\115\2\61"+
    "\1\116\1\117\2\61\1\0\13\61\1\0\1\61\7\0"+
    "\2\61\6\0\4\61\1\0\1\120\5\0\3\61\1\121"+
    "\2\61\1\122\1\123\2\61\1\0\13\61\1\0\1\61"+
    "\7\0\2\61\6\0\2\61\1\124\1\61\1\0\1\61"+
    "\5\0\4\61\1\125\1\61\1\0\3\61\1\0\3\61"+
    "\1\126\7\61\1\0\1\61\7\0\2\61\6\0\4\61"+
    "\1\0\1\127\5\0\6\61\1\0\3\61\1\0\13\61"+
    "\1\0\1\61\7\0\2\61\6\0\4\61\1\0\1\61"+
    "\5\0\3\61\1\124\2\61\1\0\3\61\1\0\1\61"+
    "\1\130\3\61\1\131\5\61\1\0\1\61\21\0\1\132"+
    "\11\0\1\133\7\0\1\134\25\0\2\61\6\0\2\61"+
    "\1\124\1\61\1\0\1\61\5\0\1\61\1\135\4\61"+
    "\1\0\2\61\1\136\1\0\13\61\1\0\1\61\7\0"+
    "\2\61\6\0\4\61\1\0\1\61\5\0\1\70\5\61"+
    "\1\137\1\140\2\61\1\0\13\61\1\0\1\61\7\0"+
    "\2\61\6\0\4\61\1\0\1\61\5\0\3\61\1\110"+
    "\2\61\1\0\3\61\1\0\13\61\1\0\1\61\24\0"+
    "\1\141\12\0\1\142\6\0\1\143\22\0\2\61\6\0"+
    "\4\61\1\0\1\144\5\0\5\61\1\145\1\0\3\61"+
    "\1\0\1\61\1\146\11\61\1\0\1\61\7\0\2\61"+
    "\6\0\4\61\1\0\1\61\5\0\1\147\5\61\1\0"+
    "\3\61\1\0\13\61\1\0\1\61\7\0\2\61\6\0"+
    "\4\61\1\0\1\150\5\0\6\61\1\0\3\61\1\0"+
    "\13\61\1\0\1\61\7\0\2\61\6\0\4\61\1\0"+
    "\1\61\5\0\1\61\1\151\4\61\1\0\3\61\1\152"+
    "\1\153\12\61\1\0\1\61\7\0\2\61\6\0\4\61"+
    "\1\0\1\61\5\0\3\61\1\154\2\61\1\0\3\61"+
    "\1\0\13\61\1\0\1\61\7\0\2\61\6\0\4\61"+
    "\1\0\1\61\5\0\1\100\2\61\1\155\2\61\1\0"+
    "\3\61\1\0\13\61\1\0\1\61\7\0\2\61\6\0"+
    "\4\61\1\0\1\61\5\0\6\61\1\156\1\157\2\61"+
    "\1\0\1\61\1\160\11\61\1\0\1\61\7\0\2\61"+
    "\6\0\4\61\1\0\1\61\5\0\1\161\3\61\1\162"+
    "\1\61\1\0\3\61\1\0\13\61\1\0\1\61\62\0"+
    "\1\14\63\0\2\14\60\0\1\14\3\0\20\53\2\0"+
    "\1\53\1\0\36\53\23\0\1\163\36\0\21\55\3\0"+
    "\36\55\1\0\2\56\6\0\4\56\1\0\1\56\5\0"+
    "\6\56\1\0\3\56\1\0\13\56\1\0\1\56\7\0"+
    "\1\164\7\0\1\164\2\0\1\164\1\0\1\165\44\0"+
    "\2\56\6\0\4\56\1\0\1\56\1\166\4\0\6\56"+
    "\1\0\3\56\1\0\13\56\1\0\1\56\1\166\6\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\6\167\1\0"+
    "\3\167\1\0\13\167\1\0\1\167\6\0\7\64\1\170"+
    "\52\64\1\0\1\65\7\0\1\65\2\0\1\65\1\57"+
    "\45\0\1\65\1\56\6\0\1\66\2\56\1\66\1\57"+
    "\1\56\5\0\6\56\1\0\3\56\1\0\13\56\1\0"+
    "\1\56\7\0\1\171\1\56\6\0\1\171\1\56\2\171"+
    "\1\0\1\171\5\0\1\171\1\56\1\171\3\56\1\0"+
    "\3\56\1\0\3\56\1\171\3\56\1\171\3\56\1\0"+
    "\1\56\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\4\167\1\172\1\167\1\0\3\167\1\0\13\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\4\167\1\173\1\167\1\0\3\167\1\0\13\167\1\0"+
    "\1\167\47\0\1\174\21\0\2\167\6\0\4\167\1\0"+
    "\1\167\5\0\6\167\1\0\3\167\1\0\2\167\1\175"+
    "\10\167\1\0\1\167\7\0\2\167\6\0\4\167\1\0"+
    "\1\167\5\0\1\167\1\176\4\167\1\0\3\167\1\0"+
    "\13\167\1\0\1\167\7\0\1\75\7\0\1\75\2\0"+
    "\1\75\1\0\1\177\44\0\2\167\6\0\4\167\1\0"+
    "\1\167\5\0\5\167\1\200\1\0\3\167\1\0\13\167"+
    "\1\0\1\167\7\0\2\167\6\0\4\167\1\0\1\167"+
    "\5\0\2\167\1\172\3\167\1\0\3\167\1\0\13\167"+
    "\1\0\1\167\7\0\2\167\6\0\4\167\1\0\1\167"+
    "\5\0\6\167\1\0\3\167\1\174\1\175\12\167\1\0"+
    "\1\167\6\0\20\201\1\102\1\103\40\201\21\202\1\106"+
    "\1\203\1\204\36\202\21\0\1\106\1\203\40\0\2\167"+
    "\6\0\4\167\1\0\1\167\5\0\2\167\1\205\3\167"+
    "\1\0\3\167\1\0\13\167\1\0\1\167\7\0\2\167"+
    "\6\0\4\167\1\0\1\167\5\0\4\167\1\206\1\167"+
    "\1\0\3\167\1\0\13\167\1\0\1\167\43\0\1\132"+
    "\25\0\2\167\6\0\4\167\1\0\1\167\5\0\6\167"+
    "\1\0\2\167\1\172\1\0\13\167\1\0\1\167\7\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\6\167\1\0"+
    "\3\167\1\207\1\210\12\167\1\0\1\167\7\0\2\167"+
    "\6\0\4\167\1\0\1\167\5\0\5\167\1\205\1\0"+
    "\3\167\1\0\13\167\1\0\1\167\47\0\1\132\21\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\6\167\1\0"+
    "\3\167\1\0\2\167\1\172\10\167\1\0\1\167\7\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\6\167\1\0"+
    "\3\167\1\211\1\212\12\167\1\0\1\167\7\0\2\167"+
    "\6\0\4\167\1\0\1\167\5\0\6\167\1\0\3\167"+
    "\1\0\10\167\1\213\2\167\1\0\1\167\42\0\1\14"+
    "\26\0\2\167\6\0\4\167\1\0\1\167\5\0\6\167"+
    "\1\0\1\167\1\205\1\167\1\0\13\167\1\0\1\167"+
    "\7\0\2\167\6\0\4\167\1\0\1\167\5\0\6\167"+
    "\1\0\3\167\1\0\12\167\1\214\1\0\1\167\7\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\6\167\1\0"+
    "\3\167\1\0\7\167\1\215\1\167\1\216\1\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\217\5\0"+
    "\6\167\1\0\3\167\1\0\13\167\1\0\1\167\7\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\6\167\1\0"+
    "\3\167\1\0\11\167\1\175\1\167\1\0\1\167\37\0"+
    "\1\220\7\0\1\221\70\0\1\222\12\0\2\167\6\0"+
    "\4\167\1\0\1\167\5\0\5\167\1\223\1\0\3\167"+
    "\1\0\2\167\1\224\10\167\1\0\1\167\7\0\2\167"+
    "\6\0\4\167\1\0\1\167\5\0\6\167\1\0\3\167"+
    "\1\0\11\167\1\225\1\167\1\0\1\167\36\0\1\226"+
    "\32\0\2\167\6\0\4\167\1\0\1\167\5\0\4\167"+
    "\1\227\1\167\1\0\3\167\1\0\13\167\1\0\1\167"+
    "\37\0\1\132\60\0\1\230\61\0\1\14\10\0\1\14"+
    "\21\0\2\167\6\0\4\167\1\0\1\167\5\0\5\167"+
    "\1\172\1\0\3\167\1\0\13\167\1\0\1\167\7\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\4\167\1\231"+
    "\1\167\1\0\3\167\1\0\13\167\1\0\1\167\7\0"+
    "\2\167\6\0\4\167\1\0\1\167\5\0\4\167\1\205"+
    "\1\167\1\0\3\167\1\0\2\167\1\205\10\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\6\167\1\0\3\167\1\0\3\167\1\232\7\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\6\167\1\0\3\167\1\0\6\167\1\233\4\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\5\167\1\234\1\141\1\235\2\167\1\0\13\167\1\0"+
    "\1\167\24\0\1\236\44\0\2\167\6\0\4\167\1\0"+
    "\1\237\5\0\6\167\1\0\3\167\1\0\13\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\5\167\1\240\1\0\3\167\1\0\13\167\1\0\1\167"+
    "\7\0\2\167\6\0\4\167\1\0\1\167\5\0\1\167"+
    "\1\241\4\167\1\0\3\167\1\0\13\167\1\0\1\167"+
    "\37\0\1\242\31\0\2\167\6\0\4\167\1\0\1\167"+
    "\5\0\5\167\1\243\1\0\3\167\1\0\13\167\1\0"+
    "\1\167\7\0\2\167\6\0\4\167\1\0\1\167\5\0"+
    "\6\167\1\72\1\244\2\167\1\0\13\167\1\0\1\167"+
    "\7\0\2\167\6\0\4\167\1\0\1\167\5\0\6\167"+
    "\1\0\3\167\1\0\7\167\1\245\3\167\1\0\1\167"+
    "\7\0\2\167\6\0\4\167\1\0\1\167\5\0\3\167"+
    "\1\246\2\167\1\247\1\250\2\167\1\0\13\167\1\0"+
    "\1\167\7\0\1\164\1\56\6\0\1\164\2\56\1\164"+
    "\1\0\1\251\5\0\6\56\1\0\3\56\1\0\13\56"+
    "\1\0\1\56\7\0\1\252\7\0\1\252\2\0\1\252"+
    "\2\0\1\253\34\0\1\253\6\0\1\254\7\0\1\254"+
    "\2\0\1\254\46\0\2\255\6\0\4\255\1\0\1\255"+
    "\5\0\6\255\1\0\3\255\1\0\13\255\1\0\1\255"+
    "\6\0\7\64\1\256\1\63\51\64\1\0\2\255\6\0"+
    "\4\255\1\0\1\255\5\0\6\255\1\0\3\255\1\0"+
    "\10\255\1\257\2\255\1\0\1\255\24\0\1\132\44\0"+
    "\2\255\6\0\4\255\1\0\1\260\5\0\6\255\1\0"+
    "\3\255\1\0\13\255\1\0\1\255\7\0\2\255\6\0"+
    "\4\255\1\0\1\255\5\0\6\255\1\0\3\255\1\0"+
    "\7\255\1\261\3\255\1\0\1\255\7\0\1\262\7\0"+
    "\1\262\2\0\1\262\2\0\1\263\34\0\1\263\6\0"+
    "\2\255\6\0\4\255\1\0\1\264\5\0\6\255\1\0"+
    "\3\255\1\0\13\255\1\0\1\255\6\0\20\201\1\102"+
    "\1\0\40\201\21\202\1\106\1\0\1\204\36\202\21\0"+
    "\1\106\41\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\1\265\5\255\1\0\3\255\1\0\13\255\1\0\1\255"+
    "\35\0\1\266\33\0\2\255\6\0\4\255\1\0\1\255"+
    "\5\0\3\255\1\267\2\255\1\0\3\255\1\0\13\255"+
    "\1\0\1\255\37\0\1\270\31\0\2\255\6\0\4\255"+
    "\1\0\1\255\5\0\5\255\1\271\1\0\3\255\1\0"+
    "\13\255\1\0\1\255\7\0\2\255\6\0\4\255\1\0"+
    "\1\255\5\0\1\255\1\272\4\255\1\0\3\255\1\0"+
    "\13\255\1\0\1\255\7\0\2\255\6\0\4\255\1\0"+
    "\1\273\5\0\6\255\1\0\3\255\1\0\13\255\1\0"+
    "\1\255\7\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\3\255\1\274\2\255\1\0\3\255\1\0\13\255\1\0"+
    "\1\255\7\0\2\255\6\0\4\255\1\0\1\275\5\0"+
    "\6\255\1\0\3\255\1\0\13\255\1\0\1\255\7\0"+
    "\2\255\6\0\4\255\1\0\1\255\5\0\1\255\1\260"+
    "\4\255\1\0\3\255\1\0\13\255\1\0\1\255\24\0"+
    "\1\276\75\0\2\277\67\0\1\300\21\0\2\255\6\0"+
    "\4\255\1\0\1\301\5\0\6\255\1\0\3\255\1\0"+
    "\13\255\1\0\1\255\7\0\2\255\6\0\4\255\1\0"+
    "\1\255\5\0\6\255\1\277\1\302\2\255\1\0\13\255"+
    "\1\0\1\255\7\0\2\255\6\0\4\255\1\0\1\255"+
    "\5\0\6\255\1\0\3\255\1\0\2\255\1\303\10\255"+
    "\1\0\1\255\37\0\1\304\31\0\2\255\6\0\4\255"+
    "\1\0\1\255\5\0\5\255\1\305\1\0\3\255\1\0"+
    "\13\255\1\0\1\255\40\0\2\306\27\0\2\255\6\0"+
    "\4\255\1\0\1\255\5\0\6\255\1\306\1\307\2\255"+
    "\1\0\13\255\1\0\1\255\7\0\2\255\6\0\4\255"+
    "\1\0\1\310\5\0\6\255\1\0\3\255\1\0\13\255"+
    "\1\0\1\255\7\0\2\255\6\0\4\255\1\0\1\255"+
    "\5\0\6\255\1\311\1\312\2\255\1\0\13\255\1\0"+
    "\1\255\7\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\6\255\1\116\1\310\2\255\1\0\13\255\1\0\1\255"+
    "\7\0\2\255\6\0\4\255\1\0\1\255\5\0\5\255"+
    "\1\260\1\0\3\255\1\0\13\255\1\0\1\255\44\0"+
    "\2\132\23\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\6\255\1\0\3\255\1\132\1\260\12\255\1\0\1\255"+
    "\7\0\2\255\6\0\4\255\1\0\1\255\5\0\3\255"+
    "\1\260\2\255\1\0\3\255\1\0\13\255\1\0\1\255"+
    "\7\0\2\255\6\0\4\255\1\0\1\255\5\0\6\255"+
    "\1\0\3\255\1\313\1\314\12\255\1\0\1\255\46\0"+
    "\1\132\22\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\6\255\1\0\3\255\1\0\1\255\1\260\11\255\1\0"+
    "\1\255\7\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\6\255\1\0\3\255\1\0\2\255\1\315\10\255\1\0"+
    "\1\255\7\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\6\255\1\0\3\255\1\0\13\255\1\316\1\317\7\0"+
    "\2\255\6\0\4\255\1\0\1\255\5\0\6\255\1\0"+
    "\3\255\1\0\7\255\1\320\3\255\1\0\1\255\42\0"+
    "\1\321\26\0\2\255\6\0\4\255\1\0\1\255\5\0"+
    "\6\255\1\0\1\255\1\322\1\255\1\0\13\255\1\0"+
    "\1\255\7\0\1\323\1\56\6\0\1\323\2\56\1\323"+
    "\1\0\1\56\1\324\4\0\6\56\1\0\3\56\1\0"+
    "\13\56\1\0\1\56\1\324\6\0\1\252\7\0\1\252"+
    "\2\0\1\252\46\0\1\254\1\56\6\0\1\254\2\56"+
    "\1\254\1\0\1\56\5\0\6\56\1\0\3\56\1\0"+
    "\13\56\1\0\1\56\7\0\2\325\6\0\4\325\1\0"+
    "\1\325\5\0\6\325\1\0\3\325\1\0\13\325\1\0"+
    "\1\325\6\0\7\64\1\256\1\326\51\64\1\0\2\325"+
    "\6\0\4\325\1\0\1\325\5\0\1\327\5\325\1\0"+
    "\3\325\1\0\13\325\1\0\1\325\7\0\2\325\6\0"+
    "\4\325\1\0\1\325\5\0\5\325\1\330\1\0\3\325"+
    "\1\0\13\325\1\0\1\325\7\0\1\262\7\0\1\262"+
    "\2\0\1\262\46\0\2\325\6\0\4\325\1\0\1\325"+
    "\5\0\4\325\1\331\1\325\1\0\3\325\1\0\13\325"+
    "\1\0\1\325\7\0\2\325\6\0\4\325\1\0\1\325"+
    "\5\0\6\325\1\0\3\325\1\0\5\325\1\332\5\325"+
    "\1\0\1\325\47\0\1\333\21\0\2\325\6\0\4\325"+
    "\1\0\1\325\5\0\6\325\1\0\3\325\1\0\2\325"+
    "\1\334\10\325\1\0\1\325\36\0\1\335\32\0\2\325"+
    "\6\0\4\325\1\0\1\325\5\0\4\325\1\336\1\325"+
    "\1\0\3\325\1\0\13\325\1\0\1\325\7\0\2\325"+
    "\6\0\4\325\1\0\1\325\5\0\5\325\1\337\1\0"+
    "\3\325\1\0\13\325\1\0\1\325\7\0\2\325\6\0"+
    "\4\325\1\0\1\325\5\0\6\325\1\0\3\325\1\0"+
    "\7\325\1\340\3\325\1\0\1\325\7\0\2\325\6\0"+
    "\4\325\1\0\1\325\5\0\4\325\1\341\1\325\1\0"+
    "\3\325\1\0\13\325\1\0\1\325\7\0\2\325\6\0"+
    "\4\325\1\0\1\325\5\0\1\340\5\325\1\0\3\325"+
    "\1\0\13\325\1\0\1\325\36\0\1\342\56\0\1\174"+
    "\52\0\1\343\44\0\2\325\6\0\4\325\1\0\1\325"+
    "\5\0\4\325\1\344\1\325\1\0\3\325\1\0\13\325"+
    "\1\0\1\325\7\0\2\325\6\0\4\325\1\0\1\325"+
    "\5\0\1\325\1\345\4\325\1\0\3\325\1\0\13\325"+
    "\1\0\1\325\7\0\2\325\6\0\4\325\1\0\1\346"+
    "\5\0\6\325\1\0\3\325\1\0\13\325\1\0\1\325"+
    "\51\0\1\347\17\0\2\325\6\0\4\325\1\0\1\325"+
    "\5\0\6\325\1\0\3\325\1\0\4\325\1\350\6\325"+
    "\1\0\1\325\33\0\1\351\35\0\2\325\6\0\4\325"+
    "\1\0\1\325\5\0\1\325\1\352\4\325\1\0\3\325"+
    "\1\0\13\325\1\0\1\325\7\0\2\325\6\0\4\325"+
    "\1\0\1\325\5\0\6\325\1\0\3\325\1\0\2\325"+
    "\1\332\10\325\1\0\1\325\33\0\1\132\35\0\2\325"+
    "\6\0\4\325\1\0\1\325\5\0\1\325\1\332\4\325"+
    "\1\0\3\325\1\0\13\325\1\0\1\325\37\0\1\353"+
    "\31\0\2\325\6\0\4\325\1\0\1\325\5\0\5\325"+
    "\1\354\1\0\3\325\1\0\13\325\1\0\1\325\7\0"+
    "\2\325\6\0\4\325\1\0\1\332\5\0\6\325\1\0"+
    "\3\325\1\0\13\325\1\0\1\325\24\0\1\355\44\0"+
    "\2\325\6\0\4\325\1\0\1\341\5\0\6\325\1\0"+
    "\3\325\1\0\13\325\1\0\1\325\7\0\2\325\6\0"+
    "\4\325\1\0\1\356\5\0\6\325\1\0\3\325\1\0"+
    "\13\325\1\0\1\325\32\0\1\357\36\0\2\325\6\0"+
    "\4\325\1\0\1\325\5\0\1\360\5\325\1\0\3\325"+
    "\1\0\13\325\1\0\1\325\7\0\1\323\1\56\6\0"+
    "\1\323\2\56\1\323\1\0\1\56\5\0\6\56\1\0"+
    "\3\56\1\0\13\56\1\0\1\56\7\0\1\323\7\0"+
    "\1\323\2\0\1\323\46\0\2\361\6\0\4\361\1\0"+
    "\1\361\5\0\6\361\1\0\3\361\1\0\13\361\1\0"+
    "\1\361\7\0\2\361\6\0\4\361\1\0\1\361\5\0"+
    "\4\361\1\362\1\361\1\0\3\361\1\0\13\361\1\0"+
    "\1\361\7\0\2\361\6\0\4\361\1\0\1\361\5\0"+
    "\6\361\1\363\1\364\2\361\1\0\13\361\1\0\1\361"+
    "\7\0\2\361\6\0\4\361\1\0\1\361\5\0\1\361"+
    "\1\365\4\361\1\0\3\361\1\0\13\361\1\0\1\361"+
    "\51\0\1\357\17\0\2\361\6\0\4\361\1\0\1\361"+
    "\5\0\6\361\1\0\3\361\1\0\4\361\1\366\6\361"+
    "\1\0\1\361\51\0\1\367\17\0\2\361\6\0\4\361"+
    "\1\0\1\361\5\0\6\361\1\0\3\361\1\0\4\361"+
    "\1\370\6\361\1\0\1\361\7\0\2\361\6\0\4\361"+
    "\1\0\1\361\5\0\3\361\1\371\2\361\1\0\3\361"+
    "\1\0\13\361\1\0\1\361\7\0\2\361\6\0\4\361"+
    "\1\0\1\361\5\0\5\361\1\371\1\0\3\361\1\0"+
    "\13\361\1\0\1\361\7\0\2\361\6\0\4\361\1\0"+
    "\1\361\5\0\2\361\1\371\3\361\1\0\3\361\1\0"+
    "\13\361\1\0\1\361\21\0\1\372\14\0\1\373\66\0"+
    "\1\374\25\0\2\361\6\0\2\361\1\375\1\361\1\0"+
    "\1\361\5\0\4\361\1\376\1\361\1\0\3\361\1\0"+
    "\13\361\1\0\1\361\7\0\2\361\6\0\4\361\1\0"+
    "\1\371\5\0\6\361\1\0\3\361\1\0\13\361\1\0"+
    "\1\361\7\0\2\361\6\0\4\361\1\0\1\361\5\0"+
    "\6\361\1\0\2\361\1\377\1\0\13\361\1\0\1\361"+
    "\32\0\1\116\36\0\2\361\6\0\4\361\1\0\1\361"+
    "\5\0\1\u0100\5\361\1\0\3\361\1\0\13\361\1\0"+
    "\1\361\53\0\1\132\15\0\2\361\6\0\4\361\1\0"+
    "\1\361\5\0\6\361\1\0\3\361\1\0\6\361\1\371"+
    "\4\361\1\0\1\361\7\0\2\361\6\0\4\361\1\0"+
    "\1\361\5\0\4\361\1\u0101\1\361\1\0\3\361\1\0"+
    "\13\361\1\0\1\361\34\0\1\132\34\0\2\361\6\0"+
    "\4\361\1\0\1\361\5\0\2\361\1\u0102\3\361\1\0"+
    "\3\361\1\0\13\361\1\0\1\361\37\0\1\174\31\0"+
    "\2\361\6\0\4\361\1\0\1\361\5\0\5\361\1\u0103"+
    "\1\0\3\361\1\0\13\361\1\0\1\361\7\0\2\u0104"+
    "\6\0\4\u0104\1\0\1\u0104\5\0\6\u0104\1\0\3\u0104"+
    "\1\0\13\u0104\1\0\1\u0104\7\0\2\u0104\6\0\4\u0104"+
    "\1\0\1\u0104\5\0\2\u0104\1\u0105\3\u0104\1\0\3\u0104"+
    "\1\0\13\u0104\1\0\1\u0104\35\0\1\311\33\0\2\u0104"+
    "\6\0\4\u0104\1\0\1\u0104\5\0\3\u0104\1\u0106\2\u0104"+
    "\1\0\3\u0104\1\0\13\u0104\1\0\1\u0104\7\0\2\u0104"+
    "\6\0\4\u0104\1\0\1\u0104\5\0\1\u0107\5\u0104\1\0"+
    "\3\u0104\1\0\13\u0104\1\0\1\u0104\7\0\2\u0104\6\0"+
    "\4\u0104\1\0\1\u0104\5\0\5\u0104\1\u0108\1\0\3\u0104"+
    "\1\0\13\u0104\1\0\1\u0104\54\0\1\u0109\14\0\2\u0104"+
    "\6\0\4\u0104\1\0\1\u0104\5\0\6\u0104\1\0\3\u0104"+
    "\1\0\7\u0104\1\u010a\3\u0104\1\0\1\u0104\32\0\1\u010b"+
    "\100\0\1\u010c\34\0\1\u010d\44\0\2\u0104\6\0\4\u0104"+
    "\1\0\1\u0104\5\0\1\u010e\5\u0104\1\0\3\u0104\1\0"+
    "\13\u0104\1\0\1\u0104\7\0\2\u0104\6\0\4\u0104\1\0"+
    "\1\u0104\5\0\6\u0104\1\0\3\u0104\1\0\4\u0104\1\u010f"+
    "\6\u0104\1\0\1\u0104\7\0\2\u0104\6\0\4\u0104\1\0"+
    "\1\u0110\5\0\6\u0104\1\0\3\u0104\1\0\13\u0104\1\0"+
    "\1\u0104\7\0\2\u0104\6\0\4\u0104\1\0\1\u0104\5\0"+
    "\6\u0104\1\0\3\u0104\1\0\2\u0104\1\u0105\10\u0104\1\0"+
    "\1\u0104\7\0\2\u0104\6\0\4\u0104\1\0\1\u0104\5\0"+
    "\6\u0104\1\0\3\u0104\1\0\4\u0104\1\u0111\6\u0104\1\0"+
    "\1\u0104\7\0\2\u0104\6\0\4\u0104\1\0\1\u0104\5\0"+
    "\6\u0104\1\0\3\u0104\1\0\4\u0104\1\u0112\6\u0104\1\0"+
    "\1\u0104\7\0\2\u0104\6\0\4\u0104\1\0\1\u0105\5\0"+
    "\6\u0104\1\0\3\u0104\1\0\13\u0104\1\0\1\u0104\7\0"+
    "\2\u0113\6\0\4\u0113\1\0\1\u0113\5\0\6\u0113\1\0"+
    "\3\u0113\1\0\13\u0113\1\0\1\u0113\7\0\2\u0113\6\0"+
    "\4\u0113\1\0\1\u0113\5\0\1\u0113\1\u0114\4\u0113\1\0"+
    "\3\u0113\1\0\13\u0113\1\0\1\u0113\7\0\2\u0113\6\0"+
    "\4\u0113\1\0\1\u0113\5\0\6\u0113\1\0\3\u0113\1\0"+
    "\2\u0113\1\u0114\10\u0113\1\0\1\u0113\7\0\2\u0113\6\0"+
    "\4\u0113\1\0\1\u0114\5\0\6\u0113\1\0\3\u0113\1\0"+
    "\13\u0113\1\0\1\u0113\37\0\1\u0115\31\0\2\u0113\6\0"+
    "\4\u0113\1\0\1\u0113\5\0\5\u0113\1\u0116\1\0\3\u0113"+
    "\1\0\13\u0113\1\0\1\u0113\54\0\1\174\63\0\1\141"+
    "\36\0\1\u0117\35\0\2\u0113\6\0\4\u0113\1\0\1\u0113"+
    "\5\0\6\u0113\1\0\3\u0113\1\0\7\u0113\1\u0118\3\u0113"+
    "\1\0\1\u0113\7\0\2\u0113\6\0\4\u0113\1\0\1\u0113"+
    "\5\0\6\u0113\1\0\3\u0113\1\0\11\u0113\1\u0119\1\u0113"+
    "\1\0\1\u0113\7\0\2\u0113\6\0\4\u0113\1\0\1\u0113"+
    "\5\0\1\u0113\1\u011a\4\u0113\1\0\3\u0113\1\0\13\u0113"+
    "\1\0\1\u0113\7\0\2\u0113\6\0\4\u0113\1\0\1\u0113"+
    "\5\0\6\u0113\1\0\3\u0113\1\0\7\u0113\1\u011b\3\u0113"+
    "\1\0\1\u0113\7\0\2\u0113\6\0\4\u0113\1\0\1\u0113"+
    "\5\0\4\u0113\1\u0118\1\u0113\1\0\3\u0113\1\0\13\u0113"+
    "\1\0\1\u0113\7\0\2\u011c\6\0\4\u011c\1\0\1\u011c"+
    "\5\0\6\u011c\1\0\3\u011c\1\0\13\u011c\1\0\1\u011c"+
    "\35\0\1\u011d\33\0\2\u011c\6\0\4\u011c\1\0\1\u011c"+
    "\5\0\3\u011c\1\u011e\2\u011c\1\0\3\u011c\1\0\13\u011c"+
    "\1\0\1\u011c\37\0\1\u011f\31\0\2\u011c\6\0\4\u011c"+
    "\1\0\1\u0120\5\0\6\u011c\1\0\3\u011c\1\0\13\u011c"+
    "\1\0\1\u011c\7\0\2\u011c\6\0\4\u011c\1\0\1\u011c"+
    "\5\0\5\u011c\1\u0120\1\0\3\u011c\1\0\13\u011c\1\0"+
    "\1\u011c\7\0\2\u011c\6\0\4\u011c\1\0\1\u011c\5\0"+
    "\5\u011c\1\u0121\1\0\3\u011c\1\0\13\u011c\1\0\1\u011c"+
    "\7\0\2\u011c\6\0\4\u011c\1\0\1\u011c\5\0\5\u011c"+
    "\1\u0122\1\0\3\u011c\1\0\13\u011c\1\0\1\u011c\7\0"+
    "\2\u0123\6\0\4\u0123\1\0\1\u0123\5\0\6\u0123\1\0"+
    "\3\u0123\1\0\13\u0123\1\0\1\u0123\36\0\1\132\32\0"+
    "\2\u0123\6\0\4\u0123\1\0\1\u0123\5\0\4\u0123\1\u0124"+
    "\1\u0123\1\0\3\u0123\1\0\13\u0123\1\0\1\u0123\32\0"+
    "\1\u0125\36\0\2\u0123\6\0\4\u0123\1\0\1\u0123\5\0"+
    "\1\u0126\5\u0123\1\0\3\u0123\1\0\13\u0123\1\0\1\u0123"+
    "\7\0\2\u0123\6\0\4\u0123\1\0\1\u0123\5\0\3\u0123"+
    "\1\u0127\2\u0123\1\0\3\u0123\1\0\13\u0123\1\0\1\u0123"+
    "\7\0\2\u0128\6\0\4\u0128\1\0\1\u0128\5\0\6\u0128"+
    "\1\0\3\u0128\1\0\13\u0128\1\0\1\u0128\37\0\1\u0129"+
    "\31\0\2\u0128\6\0\4\u0128\1\0\1\u0128\5\0\5\u0128"+
    "\1\u012a\1\0\3\u0128\1\0\13\u0128\1\0\1\u0128\7\0"+
    "\2\u0128\6\0\4\u0128\1\0\1\u0128\5\0\4\u0128\1\u012b"+
    "\1\u0128\1\0\3\u0128\1\0\13\u0128\1\0\1\u0128\7\0"+
    "\2\u012c\6\0\4\u012c\1\0\1\u012c\5\0\6\u012c\1\0"+
    "\3\u012c\1\0\13\u012c\1\0\1\u012c\40\0\2\363\27\0"+
    "\2\u012c\6\0\4\u012c\1\0\1\u012c\5\0\6\u012c\1\363"+
    "\1\u012d\2\u012c\1\0\13\u012c\1\0\1\u012c\7\0\2\u012e"+
    "\6\0\4\u012e\1\0\1\u012e\5\0\6\u012e\1\0\3\u012e"+
    "\1\0\13\u012e\1\0\1\u012e\7\0\2\u012e\6\0\4\u012e"+
    "\1\0\1\u012e\5\0\3\u012e\1\u012f\2\u012e\1\0\3\u012e"+
    "\1\0\13\u012e\1\0\1\u012e\7\0\2\u0130\6\0\4\u0130"+
    "\1\0\1\u0130\5\0\6\u0130\1\0\3\u0130\1\0\13\u0130"+
    "\1\0\1\u0130\7\0\2\u0130\6\0\4\u0130\1\0\1\u0130"+
    "\5\0\1\u0130\1\u0131\4\u0130\1\0\3\u0130\1\0\13\u0130"+
    "\1\0\1\u0130\7\0\2\u0132\6\0\4\u0132\1\0\1\u0132"+
    "\5\0\6\u0132\1\0\3\u0132\1\0\13\u0132\1\0\1\u0132"+
    "\7\0\2\u0133\6\0\4\u0133\1\0\1\u0133\5\0\6\u0133"+
    "\1\0\3\u0133\1\0\13\u0133\1\0\1\u0133\7\0\2\u0134"+
    "\6\0\4\u0134\1\0\1\u0134\5\0\6\u0134\1\0\3\u0134"+
    "\1\0\13\u0134\1\0\1\u0134\7\0\2\u0135\6\0\4\u0135"+
    "\1\0\1\u0135\5\0\6\u0135\1\0\3\u0135\1\0\13\u0135"+
    "\1\0\1\u0135\7\0\2\u0136\6\0\4\u0136\1\0\1\u0136"+
    "\5\0\6\u0136\1\0\3\u0136\1\0\13\u0136\1\0\1\u0136"+
    "\7\0\2\u0137\6\0\4\u0137\1\0\1\u0137\5\0\6\u0137"+
    "\1\0\3\u0137\1\0\13\u0137\1\0\1\u0137\7\0\2\u0138"+
    "\6\0\4\u0138\1\0\1\u0138\5\0\6\u0138\1\0\3\u0138"+
    "\1\0\13\u0138\1\0\1\u0138\7\0\2\u0139\6\0\4\u0139"+
    "\1\0\1\u0139\5\0\6\u0139\1\0\3\u0139\1\0\13\u0139"+
    "\1\0\1\u0139\7\0\2\u013a\6\0\4\u013a\1\0\1\u013a"+
    "\5\0\6\u013a\1\0\3\u013a\1\0\13\u013a\1\0\1\u013a"+
    "\7\0\2\u013b\6\0\4\u013b\1\0\1\u013b\5\0\6\u013b"+
    "\1\0\3\u013b\1\0\13\u013b\1\0\1\u013b\7\0\2\u013c"+
    "\6\0\4\u013c\1\0\1\u013c\5\0\6\u013c\1\0\3\u013c"+
    "\1\0\13\u013c\1\0\1\u013c\7\0\2\u013d\6\0\4\u013d"+
    "\1\0\1\u013d\5\0\6\u013d\1\0\3\u013d\1\0\13\u013d"+
    "\1\0\1\u013d\7\0\2\u013e\6\0\4\u013e\1\0\1\u013e"+
    "\5\0\6\u013e\1\0\3\u013e\1\0\13\u013e\1\0\1\u013e"+
    "\7\0\2\u013f\6\0\4\u013f\1\0\1\u013f\5\0\6\u013f"+
    "\1\0\3\u013f\1\0\13\u013f\1\0\1\u013f\7\0\2\u0140"+
    "\6\0\4\u0140\1\0\1\u0140\5\0\6\u0140\1\0\3\u0140"+
    "\1\0\13\u0140\1\0\1\u0140\7\0\2\u0141\6\0\4\u0141"+
    "\1\0\1\u0141\5\0\6\u0141\1\0\3\u0141\1\0\13\u0141"+
    "\1\0\1\u0141\7\0\2\u0142\6\0\4\u0142\1\0\1\u0142"+
    "\5\0\6\u0142\1\0\3\u0142\1\0\13\u0142\1\0\1\u0142"+
    "\7\0\2\u0143\6\0\4\u0143\1\0\1\u0143\5\0\6\u0143"+
    "\1\0\3\u0143\1\0\13\u0143\1\0\1\u0143\7\0\2\u0144"+
    "\6\0\4\u0144\1\0\1\u0144\5\0\6\u0144\1\0\3\u0144"+
    "\1\0\13\u0144\1\0\1\u0144\7\0\2\u0145\6\0\4\u0145"+
    "\1\0\1\u0145\5\0\6\u0145\1\0\3\u0145\1\0\13\u0145"+
    "\1\0\1\u0145\7\0\2\u0146\6\0\4\u0146\1\0\1\u0146"+
    "\5\0\6\u0146\1\0\3\u0146\1\0\13\u0146\1\0\1\u0146"+
    "\7\0\2\u0147\6\0\4\u0147\1\0\1\u0147\5\0\6\u0147"+
    "\1\0\3\u0147\1\0\13\u0147\1\0\1\u0147\7\0\2\u0148"+
    "\6\0\4\u0148\1\0\1\u0148\5\0\6\u0148\1\0\3\u0148"+
    "\1\0\13\u0148\1\0\1\u0148\7\0\2\u0149\6\0\4\u0149"+
    "\1\0\1\u0149\5\0\6\u0149\1\0\3\u0149\1\0\13\u0149"+
    "\1\0\1\u0149\7\0\2\u014a\6\0\4\u014a\1\0\1\u014a"+
    "\5\0\6\u014a\1\0\3\u014a\1\0\13\u014a\1\0\1\u014a"+
    "\7\0\2\u014b\6\0\4\u014b\1\0\1\u014b\5\0\6\u014b"+
    "\1\0\3\u014b\1\0\13\u014b\1\0\1\u014b\7\0\2\u014c"+
    "\6\0\4\u014c\1\0\1\u014c\5\0\6\u014c\1\0\3\u014c"+
    "\1\0\13\u014c\1\0\1\u014c\7\0\2\u014d\6\0\4\u014d"+
    "\1\0\1\u014d\5\0\6\u014d\1\0\3\u014d\1\0\13\u014d"+
    "\1\0\1\u014d\7\0\2\u014e\6\0\4\u014e\1\0\1\u014e"+
    "\5\0\6\u014e\1\0\3\u014e\1\0\13\u014e\1\0\1\u014e"+
    "\7\0\2\u014f\6\0\4\u014f\1\0\1\u014f\5\0\6\u014f"+
    "\1\0\3\u014f\1\0\13\u014f\1\0\1\u014f\7\0\2\u0150"+
    "\6\0\4\u0150\1\0\1\u0150\5\0\6\u0150\1\0\3\u0150"+
    "\1\0\13\u0150\1\0\1\u0150\7\0\2\u0151\6\0\4\u0151"+
    "\1\0\1\u0151\5\0\6\u0151\1\0\3\u0151\1\0\13\u0151"+
    "\1\0\1\u0151\7\0\2\u0152\6\0\4\u0152\1\0\1\u0152"+
    "\5\0\6\u0152\1\0\3\u0152\1\0\13\u0152\1\0\1\u0152"+
    "\7\0\2\u0153\6\0\4\u0153\1\0\1\u0153\5\0\6\u0153"+
    "\1\0\3\u0153\1\0\13\u0153\1\0\1\u0153\7\0\2\u0154"+
    "\6\0\4\u0154\1\0\1\u0154\5\0\6\u0154\1\0\3\u0154"+
    "\1\0\13\u0154\1\0\1\u0154\7\0\2\u0155\6\0\4\u0155"+
    "\1\0\1\u0155\5\0\6\u0155\1\0\3\u0155\1\0\13\u0155"+
    "\1\0\1\u0155\7\0\2\u0156\6\0\4\u0156\1\0\1\u0156"+
    "\5\0\6\u0156\1\0\3\u0156\1\0\13\u0156\1\0\1\u0156"+
    "\7\0\2\u0157\6\0\4\u0157\1\0\1\u0157\5\0\6\u0157"+
    "\1\0\3\u0157\1\0\13\u0157\1\0\1\u0157\7\0\2\u0158"+
    "\6\0\4\u0158\1\0\1\u0158\5\0\6\u0158\1\0\3\u0158"+
    "\1\0\13\u0158\1\0\1\u0158\7\0\2\u0159\6\0\4\u0159"+
    "\1\0\1\u0159\5\0\6\u0159\1\0\3\u0159\1\0\13\u0159"+
    "\1\0\1\u0159\7\0\2\u015a\6\0\4\u015a\1\0\1\u015a"+
    "\5\0\6\u015a\1\0\3\u015a\1\0\13\u015a\1\0\1\u015a"+
    "\7\0\2\u015b\6\0\4\u015b\1\0\1\u015b\5\0\6\u015b"+
    "\1\0\3\u015b\1\0\13\u015b\1\0\1\u015b\7\0\2\u015c"+
    "\6\0\4\u015c\1\0\1\u015c\5\0\6\u015c\1\0\3\u015c"+
    "\1\0\13\u015c\1\0\1\u015c\7\0\2\u015d\6\0\4\u015d"+
    "\1\0\1\u015d\5\0\6\u015d\1\0\3\u015d\1\0\13\u015d"+
    "\1\0\1\u015d\7\0\2\u015e\6\0\4\u015e\1\0\1\u015e"+
    "\5\0\6\u015e\1\0\3\u015e\1\0\13\u015e\1\0\1\u015e"+
    "\7\0\2\u015f\6\0\4\u015f\1\0\1\u015f\5\0\6\u015f"+
    "\1\0\3\u015f\1\0\13\u015f\1\0\1\u015f\7\0\2\u0160"+
    "\6\0\4\u0160\1\0\1\u0160\5\0\6\u0160\1\0\3\u0160"+
    "\1\0\13\u0160\1\0\1\u0160\7\0\2\u0161\6\0\4\u0161"+
    "\1\0\1\u0161\5\0\6\u0161\1\0\3\u0161\1\0\13\u0161"+
    "\1\0\1\u0161\7\0\2\u0162\6\0\4\u0162\1\0\1\u0162"+
    "\5\0\6\u0162\1\0\3\u0162\1\0\13\u0162\1\0\1\u0162"+
    "\7\0\2\u0163\6\0\4\u0163\1\0\1\u0163\5\0\6\u0163"+
    "\1\0\3\u0163\1\0\13\u0163\1\0\1\u0163\7\0\2\u0164"+
    "\6\0\4\u0164\1\0\1\u0164\5\0\6\u0164\1\0\3\u0164"+
    "\1\0\13\u0164\1\0\1\u0164\7\0\2\u0165\6\0\4\u0165"+
    "\1\0\1\u0165\5\0\6\u0165\1\0\3\u0165\1\0\13\u0165"+
    "\1\0\1\u0165\7\0\2\u0166\6\0\4\u0166\1\0\1\u0166"+
    "\5\0\6\u0166\1\0\3\u0166\1\0\13\u0166\1\0\1\u0166"+
    "\7\0\2\u0167\6\0\4\u0167\1\0\1\u0167\5\0\6\u0167"+
    "\1\0\3\u0167\1\0\13\u0167\1\0\1\u0167\7\0\2\u0168"+
    "\6\0\4\u0168\1\0\1\u0168\5\0\6\u0168\1\0\3\u0168"+
    "\1\0\13\u0168\1\0\1\u0168\7\0\2\u0169\6\0\4\u0169"+
    "\1\0\1\u0169\5\0\6\u0169\1\0\3\u0169\1\0\13\u0169"+
    "\1\0\1\u0169\7\0\2\u016a\6\0\4\u016a\1\0\1\u016a"+
    "\5\0\6\u016a\1\0\3\u016a\1\0\13\u016a\1\0\1\u016a"+
    "\7\0\2\u016b\6\0\4\u016b\1\0\1\u016b\5\0\6\u016b"+
    "\1\0\3\u016b\1\0\13\u016b\1\0\1\u016b\7\0\2\u016c"+
    "\6\0\4\u016c\1\0\1\u016c\5\0\6\u016c\1\0\3\u016c"+
    "\1\0\13\u016c\1\0\1\u016c\7\0\2\u016d\6\0\4\u016d"+
    "\1\0\1\u016d\5\0\6\u016d\1\0\3\u016d\1\0\13\u016d"+
    "\1\0\1\u016d\7\0\2\u016e\6\0\4\u016e\1\0\1\u016e"+
    "\5\0\6\u016e\1\0\3\u016e\1\0\13\u016e\1\0\1\u016e"+
    "\7\0\2\u016f\6\0\4\u016f\1\0\1\u016f\5\0\6\u016f"+
    "\1\0\3\u016f\1\0\13\u016f\1\0\1\u016f\7\0\2\u0170"+
    "\6\0\4\u0170\1\0\1\u0170\5\0\6\u0170\1\0\3\u0170"+
    "\1\0\13\u0170\1\0\1\u0170\7\0\2\u0171\6\0\4\u0171"+
    "\1\0\1\u0171\5\0\6\u0171\1\0\3\u0171\1\0\13\u0171"+
    "\1\0\1\u0171\7\0\2\u0172\6\0\4\u0172\1\0\1\u0172"+
    "\5\0\6\u0172\1\0\3\u0172\1\0\13\u0172\1\0\1\u0172"+
    "\7\0\2\u0173\6\0\4\u0173\1\0\1\u0173\5\0\6\u0173"+
    "\1\0\3\u0173\1\0\13\u0173\1\0\1\u0173\7\0\2\u0174"+
    "\6\0\4\u0174\1\0\1\u0174\5\0\6\u0174\1\0\3\u0174"+
    "\1\0\13\u0174\1\0\1\u0174\7\0\2\u0175\6\0\4\u0175"+
    "\1\0\1\u0175\5\0\6\u0175\1\0\3\u0175\1\0\13\u0175"+
    "\1\0\1\u0175\7\0\2\u0176\6\0\4\u0176\1\0\1\u0176"+
    "\5\0\6\u0176\1\0\3\u0176\1\0\13\u0176\1\0\1\u0176"+
    "\7\0\2\u0177\6\0\4\u0177\1\0\1\u0177\5\0\6\u0177"+
    "\1\0\3\u0177\1\0\13\u0177\1\0\1\u0177\7\0\2\u0178"+
    "\6\0\4\u0178\1\0\1\u0178\5\0\6\u0178\1\0\3\u0178"+
    "\1\0\13\u0178\1\0\1\u0178\7\0\2\u0179\6\0\4\u0179"+
    "\1\0\1\u0179\5\0\6\u0179\1\0\3\u0179\1\0\13\u0179"+
    "\1\0\1\u0179\7\0\2\u017a\6\0\4\u017a\1\0\1\u017a"+
    "\5\0\6\u017a\1\0\3\u017a\1\0\13\u017a\1\0\1\u017a"+
    "\7\0\2\u017b\6\0\4\u017b\1\0\1\u017b\5\0\6\u017b"+
    "\1\0\3\u017b\1\0\13\u017b\1\0\1\u017b\7\0\2\u017c"+
    "\6\0\4\u017c\1\0\1\u017c\5\0\6\u017c\1\0\3\u017c"+
    "\1\0\13\u017c\1\0\1\u017c\7\0\2\u017d\6\0\4\u017d"+
    "\1\0\1\u017d\5\0\6\u017d\1\0\3\u017d\1\0\13\u017d"+
    "\1\0\1\u017d\7\0\2\u017e\6\0\4\u017e\1\0\1\u017e"+
    "\5\0\6\u017e\1\0\3\u017e\1\0\13\u017e\1\0\1\u017e"+
    "\7\0\2\u017f\6\0\4\u017f\1\0\1\u017f\5\0\6\u017f"+
    "\1\0\3\u017f\1\0\13\u017f\1\0\1\u017f\7\0\2\u0180"+
    "\6\0\4\u0180\1\0\1\u0180\5\0\6\u0180\1\0\3\u0180"+
    "\1\0\13\u0180\1\0\1\u0180\7\0\2\u0181\6\0\4\u0181"+
    "\1\0\1\u0181\5\0\6\u0181\1\0\3\u0181\1\0\13\u0181"+
    "\1\0\1\u0181\7\0\2\u0182\6\0\4\u0182\1\0\1\u0182"+
    "\5\0\6\u0182\1\0\3\u0182\1\0\13\u0182\1\0\1\u0182"+
    "\7\0\2\u0183\6\0\4\u0183\1\0\1\u0183\5\0\6\u0183"+
    "\1\0\3\u0183\1\0\13\u0183\1\0\1\u0183\7\0\2\u0184"+
    "\6\0\4\u0184\1\0\1\u0184\5\0\6\u0184\1\0\3\u0184"+
    "\1\0\13\u0184\1\0\1\u0184\7\0\2\u0185\6\0\4\u0185"+
    "\1\0\1\u0185\5\0\6\u0185\1\0\3\u0185\1\0\13\u0185"+
    "\1\0\1\u0185\7\0\2\u0186\6\0\4\u0186\1\0\1\u0186"+
    "\5\0\6\u0186\1\0\3\u0186\1\0\13\u0186\1\0\1\u0186"+
    "\7\0\2\u0187\6\0\4\u0187\1\0\1\u0187\5\0\6\u0187"+
    "\1\0\3\u0187\1\0\13\u0187\1\0\1\u0187\7\0\2\u0188"+
    "\6\0\4\u0188\1\0\1\u0188\5\0\6\u0188\1\0\3\u0188"+
    "\1\0\13\u0188\1\0\1\u0188\7\0\2\u0189\6\0\4\u0189"+
    "\1\0\1\u0189\5\0\6\u0189\1\0\3\u0189\1\0\13\u0189"+
    "\1\0\1\u0189\7\0\2\u018a\6\0\4\u018a\1\0\1\u018a"+
    "\5\0\6\u018a\1\0\3\u018a\1\0\13\u018a\1\0\1\u018a"+
    "\7\0\2\u018b\6\0\4\u018b\1\0\1\u018b\5\0\6\u018b"+
    "\1\0\3\u018b\1\0\13\u018b\1\0\1\u018b\7\0\2\u018c"+
    "\6\0\4\u018c\1\0\1\u018c\5\0\6\u018c\1\0\3\u018c"+
    "\1\0\13\u018c\1\0\1\u018c\7\0\2\u018d\6\0\4\u018d"+
    "\1\0\1\u018d\5\0\6\u018d\1\0\3\u018d\1\0\13\u018d"+
    "\1\0\1\u018d\7\0\2\u018e\6\0\4\u018e\1\0\1\u018e"+
    "\5\0\6\u018e\1\0\3\u018e\1\0\13\u018e\1\0\1\u018e"+
    "\7\0\2\u018f\6\0\4\u018f\1\0\1\u018f\5\0\6\u018f"+
    "\1\0\3\u018f\1\0\13\u018f\1\0\1\u018f\7\0\2\u0190"+
    "\6\0\4\u0190\1\0\1\u0190\5\0\6\u0190\1\0\3\u0190"+
    "\1\0\13\u0190\1\0\1\u0190\7\0\2\u0191\6\0\4\u0191"+
    "\1\0\1\u0191\5\0\6\u0191\1\0\3\u0191\1\0\13\u0191"+
    "\1\0\1\u0191\7\0\2\u0192\6\0\4\u0192\1\0\1\u0192"+
    "\5\0\6\u0192\1\0\3\u0192\1\0\13\u0192\1\0\1\u0192"+
    "\7\0\2\u0193\6\0\4\u0193\1\0\1\u0193\5\0\6\u0193"+
    "\1\0\3\u0193\1\0\13\u0193\1\0\1\u0193\7\0\2\u0194"+
    "\6\0\4\u0194\1\0\1\u0194\5\0\6\u0194\1\0\3\u0194"+
    "\1\0\13\u0194\1\0\1\u0194\7\0\2\u0195\6\0\4\u0195"+
    "\1\0\1\u0195\5\0\6\u0195\1\0\3\u0195\1\0\13\u0195"+
    "\1\0\1\u0195\7\0\2\u0196\6\0\4\u0196\1\0\1\u0196"+
    "\5\0\6\u0196\1\0\3\u0196\1\0\13\u0196\1\0\1\u0196"+
    "\7\0\2\u0197\6\0\4\u0197\1\0\1\u0197\5\0\6\u0197"+
    "\1\0\3\u0197\1\0\13\u0197\1\0\1\u0197\7\0\2\u0198"+
    "\6\0\4\u0198\1\0\1\u0198\5\0\6\u0198\1\0\3\u0198"+
    "\1\0\13\u0198\1\0\1\u0198\7\0\2\u0199\6\0\4\u0199"+
    "\1\0\1\u0199\5\0\6\u0199\1\0\3\u0199\1\0\13\u0199"+
    "\1\0\1\u0199\7\0\2\u019a\6\0\4\u019a\1\0\1\u019a"+
    "\5\0\6\u019a\1\0\3\u019a\1\0\13\u019a\1\0\1\u019a"+
    "\7\0\2\u019b\6\0\4\u019b\1\0\1\u019b\5\0\6\u019b"+
    "\1\0\3\u019b\1\0\13\u019b\1\0\1\u019b\7\0\2\u019c"+
    "\6\0\4\u019c\1\0\1\u019c\5\0\6\u019c\1\0\3\u019c"+
    "\1\0\13\u019c\1\0\1\u019c\7\0\2\u019d\6\0\4\u019d"+
    "\1\0\1\u019d\5\0\6\u019d\1\0\3\u019d\1\0\13\u019d"+
    "\1\0\1\u019d\7\0\2\u019e\6\0\4\u019e\1\0\1\u019e"+
    "\5\0\6\u019e\1\0\3\u019e\1\0\13\u019e\1\0\1\u019e"+
    "\7\0\2\u019f\6\0\4\u019f\1\0\1\u019f\5\0\6\u019f"+
    "\1\0\3\u019f\1\0\13\u019f\1\0\1\u019f\7\0\2\u01a0"+
    "\6\0\4\u01a0\1\0\1\u01a0\5\0\6\u01a0\1\0\3\u01a0"+
    "\1\0\13\u01a0\1\0\1\u01a0\7\0\2\u01a1\6\0\4\u01a1"+
    "\1\0\1\u01a1\5\0\6\u01a1\1\0\3\u01a1\1\0\13\u01a1"+
    "\1\0\1\u01a1\7\0\2\u01a2\6\0\4\u01a2\1\0\1\u01a2"+
    "\5\0\6\u01a2\1\0\3\u01a2\1\0\13\u01a2\1\0\1\u01a2"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\6\1\1\11\45\1\1\0\1\11\2\0"+
    "\4\1\1\0\6\1\1\0\2\11\2\0\1\11\1\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\7\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\3\0\6\1\1\0"+
    "\3\1\1\0\4\1\1\11\1\1\2\0\1\1\1\0"+
    "\3\1\1\0\2\1\1\0\1\1\2\0\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\6\1\3\0\3\1\1\0"+
    "\1\1\1\0\5\1\1\0\3\1\1\0\4\1\1\0"+
    "\3\1\2\0\1\1\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\0\5\1\3\0\3\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\6\1\1\0\1\1\1\0\4\1\2\0"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\2\1\3\0\14\1\1\0"+
    "\1\1\3\0\7\1\1\0\1\1\1\0\5\1\1\0"+
    "\1\1\1\0\5\1\1\0\3\1\1\0\170\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { TokenCollector.addError("ERROR_LEXICO", yytext(), yyline+1);
            } 
            // fall through
          case 17: break;
          case 2: 
            { TokenCollector.add("LITERAL_ENTERO", yytext(), yyline+1);
            } 
            // fall through
          case 18: break;
          case 3: 
            { TokenCollector.add("IDENTIFICADOR", yytext(), yyline+1);
            } 
            // fall through
          case 19: break;
          case 4: 
            { /* ignore */
            } 
            // fall through
          case 20: break;
          case 5: 
            { TokenCollector.add("OPERADOR", yytext(), yyline+1);
            } 
            // fall through
          case 21: break;
          case 6: 
            { TokenCollector.addError("ERROR_LEXICO_NUM_SEGUIDO_POR_TEXTO", yytext(), yyline+1);
            } 
            // fall through
          case 22: break;
          case 7: 
            { TokenCollector.addError("ERROR_LEXICO_REAL_PUNTO_COLA",  yytext(), yyline+1);
            } 
            // fall through
          case 23: break;
          case 8: 
            { TokenCollector.add("LITERAL_OCTAL",  yytext(), yyline+1);
            } 
            // fall through
          case 24: break;
          case 9: 
            { TokenCollector.addError("ERROR_LEXICO_REAL_PUNTO_LIDER", yytext(), yyline+1);
            } 
            // fall through
          case 25: break;
          case 10: 
            { TokenCollector.add("LITERAL_STRING", yytext(), yyline+1);
            } 
            // fall through
          case 26: break;
          case 11: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { TokenCollector.addError("ERROR_STRING_SIN_CIERRE", yytext(), yyline+1);
            } 
            // fall through
          case 27: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { TokenCollector.addError("ERROR_CHAR_SIN_CIERRE",   yytext(), yyline+1);
            } 
            // fall through
          case 28: break;
          case 13: 
            { TokenCollector.add("PALABRA_RESERVADA", yytext(), yyline+1);
            } 
            // fall through
          case 29: break;
          case 14: 
            { TokenCollector.add("LITERAL_REAL",   yytext(), yyline+1);
            } 
            // fall through
          case 30: break;
          case 15: 
            { TokenCollector.add("LITERAL_HEX",    yytext(), yyline+1);
            } 
            // fall through
          case 31: break;
          case 16: 
            { TokenCollector.add("LITERAL_CHAR",   yytext(), yyline+1);
            } 
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
