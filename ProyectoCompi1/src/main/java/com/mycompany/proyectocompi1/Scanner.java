/* The following code was generated by JFlex 1.7.0 */

/* ================================== Sección 1: User code ================================== */
package com.mycompany.proyectocompi1;

/* ===== Corte de sección ===== */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.flex</tt>
 */
public class Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\22\1\60\1\60\1\24\22\0\1\3\1\0\1\21"+
    "\4\0\1\23\1\6\1\10\1\7\1\54\1\20\1\17\1\15\1\20"+
    "\1\11\7\14\2\1\1\20\1\20\1\55\1\56\1\57\2\0\1\25"+
    "\1\43\1\47\1\27\1\16\1\13\1\46\1\41\1\34\1\52\1\53"+
    "\1\42\1\36\1\26\1\30\1\51\1\2\1\31\1\40\1\32\1\44"+
    "\1\35\1\50\1\12\1\45\1\2\1\20\1\0\1\20\1\20\2\0"+
    "\1\25\1\43\1\47\1\27\1\16\1\13\1\46\1\41\1\34\1\52"+
    "\1\53\1\42\1\36\1\26\1\30\1\51\1\2\1\31\1\40\1\32"+
    "\1\44\1\35\1\50\1\12\1\45\1\2\1\4\1\0\1\5\7\0"+
    "\1\60\252\0\2\33\115\0\1\37\u1ea8\0\1\60\1\60\u0100\0\1\0"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\1\3\5\1\2"+
    "\2\3\1\5\1\3\1\5\2\1\6\3\1\1\3\3"+
    "\1\1\10\3\3\5\3\0\1\6\1\7\1\6\1\0"+
    "\1\3\1\0\1\4\1\0\1\10\1\11\1\6\4\3"+
    "\1\12\3\3\1\0\1\13\1\14\2\0\1\15\1\0"+
    "\7\3\1\16\1\3\1\16\1\5\4\3\1\16\1\5"+
    "\1\0\1\5\2\3\3\0\6\3\1\0\7\3\1\0"+
    "\1\17\2\0\1\20\1\3\2\0\1\21\1\22\2\16"+
    "\2\3\1\0\1\3\2\0\1\23\1\0\1\5\10\3"+
    "\3\0\4\3\1\0\5\3\1\20\10\3\1\6\1\7"+
    "\2\0\1\3\1\0\1\3\1\16\1\3\1\12\1\0"+
    "\10\3\3\0\4\3\1\0\3\3\1\16\5\3\1\17"+
    "\1\0\1\3\1\4\3\3\1\16\5\3\3\0\4\3"+
    "\1\0\1\3\1\16\10\3\1\16\3\0\10\3\1\16"+
    "\4\3\3\0\6\3\1\16\1\3\1\0\6\3\1\0"+
    "\1\16\3\3\1\16\1\0\3\3\1\0\1\3\1\16"+
    "\1\3\1\0\2\3\1\0\2\3\1\16\161\3\1\0"+
    "\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\304\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u08ff\0\u0930\0\u0188\0\304\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0341\0\304\0\304\0\u0bad\0\u0bde\0\304\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8"+
    "\0\u0930\0\u0930\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\304\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045"+
    "\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\304\0\u12f3\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u0992\0\u1419\0\u144a\0\u13b7"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\304"+
    "\0\u15d2\0\u13b7\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1c54"+
    "\0\u1ce7\0\u1d18\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u08ff\0\u20ec"+
    "\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u0961"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2243\0\u2307\0\u2338\0\u2369\0\u239a"+
    "\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522"+
    "\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\u273d\0\u2648\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2958"+
    "\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0"+
    "\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2d2c"+
    "\0\u2dbf\0\u2df0\0\u2e21\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5"+
    "\0\u2f16\0\u2f47\0\u2ee5\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c"+
    "\0\u306d\0\u309e\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193"+
    "\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b"+
    "\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3"+
    "\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b"+
    "\0\u365c\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3"+
    "\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b"+
    "\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3"+
    "\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b"+
    "\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3"+
    "\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b"+
    "\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3"+
    "\0\u4114\0\u4145\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b"+
    "\0\u429c\0\u42cd\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3"+
    "\0\u4424\0\u4455\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b"+
    "\0\u45ac\0\u45dd\0\u460e\0\u463f\0\u4670\0\u4670";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\6\1\20\1\21\1\22"+
    "\1\14\1\23\1\10\1\24\1\10\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\7\1\41\1\42\1\43\1\7\1\44\1\45"+
    "\1\46\1\47\2\7\1\50\1\51\1\14\1\52\22\0"+
    "\1\53\61\0\1\54\61\0\1\55\117\0\1\6\1\56"+
    "\6\0\1\6\2\56\1\6\1\57\1\60\6\0\6\56"+
    "\1\0\3\56\1\0\14\56\5\0\1\61\2\62\1\0"+
    "\2\61\3\0\4\62\1\0\1\62\2\0\1\61\1\0"+
    "\1\61\1\0\6\62\1\61\3\62\1\61\14\62\4\0"+
    "\1\61\3\0\1\10\16\0\1\10\1\0\1\10\34\0"+
    "\5\63\1\64\53\63\7\0\1\65\60\0\1\14\52\0"+
    "\1\66\1\56\6\0\1\67\1\70\1\56\1\67\1\57"+
    "\1\60\6\0\6\56\1\0\3\56\1\0\14\56\5\0"+
    "\1\61\2\62\1\0\2\61\3\0\4\62\1\0\1\62"+
    "\2\0\1\61\1\0\1\61\1\0\3\62\1\71\2\62"+
    "\1\61\3\62\1\61\14\62\4\0\2\61\2\62\1\0"+
    "\2\61\3\0\4\62\1\0\1\62\2\0\1\61\1\0"+
    "\1\61\1\0\3\62\1\72\2\62\1\61\1\73\2\62"+
    "\1\61\4\62\1\74\7\62\4\0\1\61\1\0\1\75"+
    "\7\0\1\75\2\0\1\75\44\0\1\61\2\62\1\0"+
    "\2\61\3\0\1\62\1\76\2\62\1\0\1\62\2\0"+
    "\1\61\1\0\1\61\1\0\1\62\1\77\4\62\1\61"+
    "\3\62\1\61\2\62\1\100\11\62\4\0\1\61\17\0"+
    "\1\14\41\0\21\101\1\102\1\103\1\101\1\104\34\101"+
    "\22\105\1\106\1\0\1\107\34\105\1\61\2\62\1\0"+
    "\2\61\3\0\4\62\1\0\1\62\2\0\1\61\1\0"+
    "\1\61\1\0\1\62\1\110\2\62\1\111\1\62\1\61"+
    "\3\62\1\61\1\112\2\62\1\113\10\62\4\0\2\61"+
    "\2\62\1\0\2\61\3\0\4\62\1\0\1\62\2\0"+
    "\1\61\1\0\1\61\1\0\3\62\1\114\2\62\1\61"+
    "\1\115\2\62\1\61\14\62\4\0\2\61\2\62\1\0"+
    "\2\61\3\0\4\62\1\0\1\116\2\0\1\61\1\0"+
    "\1\61\1\0\3\62\1\117\2\62\1\61\1\120\2\62"+
    "\1\61\14\62\4\0\2\61\2\62\1\0\2\61\3\0"+
    "\2\62\1\121\1\62\1\0\1\62\2\0\1\61\1\0"+
    "\1\61\1\0\4\62\1\122\1\62\1\61\3\62\1\61"+
    "\3\62\1\123\10\62\4\0\2\61\2\62\1\0\2\61"+
    "\3\0\4\62\1\0\1\124\2\0\1\61\1\0\1\61"+
    "\1\0\6\62\1\61\3\62\1\61\14\62\4\0\2\61"+
    "\2\62\1\0\2\61\3\0\4\62\1\0\1\62\2\0"+
    "\1\61\1\0\1\61\1\0\3\62\1\121\2\62\1\61"+
    "\3\62\1\61\1\62\1\125\3\62\1\126\6\62\4\0"+
    "\1\61\13\0\1\127\12\0\1\130\7\0\1\131\22\0"+
    "\1\61\2\62\1\0\2\61\3\0\2\62\1\121\1\62"+
    "\1\0\1\62\2\0\1\61\1\0\1\61\1\0\1\62"+
    "\1\132\4\62\1\61\2\62\1\133\1\61\14\62\4\0"+
    "\2\61\2\62\1\0\2\61\3\0\4\62\1\0\1\62"+
    "\2\0\1\61\1\0\1\61\1\0\1\71\5\62\1\61"+
    "\1\134\2\62\1\61\14\62\4\0\2\61\2\62\1\0"+
    "\2\61\3\0\4\62\1\0\1\62\2\0\1\61\1\0"+
    "\1\61\1\0\3\62\1\110\2\62\1\61\3\62\1\61"+
    "\14\62\4\0\1\61\16\0\1\135\13\0\1\136\6\0"+
    "\1\137\17\0\1\61\2\62\1\0\2\61\3\0\4\62"+
    "\1\0\1\140\2\0\1\61\1\0\1\61\1\0\5\62"+
    "\1\141\1\61\3\62\1\61\1\62\1\142\12\62\4\0"+
    "\2\61\2\62\1\0\2\61\3\0\4\62\1\0\1\62"+
    "\2\0\1\61\1\0\1\61\1\0\1\143\5\62\1\61"+
    "\3\62\1\61\14\62\4\0\2\61\2\62\1\0\2\61"+
    "\3\0\4\62\1\0\1\144\2\0\1\61\1\0\1\61"+
    "\1\0\6\62\1\61\3\62\1\61\14\62\4\0\2\61"+
    "\2\62\1\0\2\61\3\0\4\62\1\0\1\62\2\0"+
    "\1\61\1\0\1\61\1\0\1\62\1\145\4\62\1\61"+
    "\3\62\1\146\1\147\13\62\4\0\2\61\2\62\1\0"+
    "\2\61\3\0\4\62\1\0\1\62\2\0\1\61\1\0"+
    "\1\61\1\0\3\62\1\150\2\62\1\61\3\62\1\61"+
    "\14\62\4\0\2\61\2\62\1\0\2\61\3\0\4\62"+
    "\1\0\1\62\2\0\1\61\1\0\1\61\1\0\1\100"+
    "\2\62\1\151\2\62\1\61\3\62\1\61\14\62\4\0"+
    "\2\61\2\62\1\0\2\61\3\0\4\62\1\0\1\62"+
    "\2\0\1\61\1\0\1\61\1\0\6\62\1\61\1\152"+
    "\2\62\1\61\1\62\1\153\12\62\4\0\2\61\2\62"+
    "\1\0\2\61\3\0\4\62\1\0\1\62\2\0\1\61"+
    "\1\0\1\61\1\0\1\154\3\62\1\155\1\62\1\61"+
    "\3\62\1\61\14\62\4\0\1\61\54\0\1\14\62\0"+
    "\2\14\57\0\1\14\2\0\21\53\2\0\1\53\1\0"+
    "\34\53\24\0\1\156\34\0\22\55\3\0\34\55\1\0"+
    "\2\56\6\0\4\56\1\0\1\56\6\0\6\56\1\0"+
    "\3\56\1\0\14\56\6\0\1\157\7\0\1\157\2\0"+
    "\1\157\1\0\1\160\43\0\2\56\6\0\4\56\1\0"+
    "\1\56\1\161\5\0\6\56\1\0\3\56\1\0\14\56"+
    "\1\161\6\0\1\162\7\0\2\162\2\0\1\162\6\0"+
    "\6\162\1\0\3\162\1\0\14\162\5\0\1\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\6\163\1\61\3\163\1\61\14\163"+
    "\4\0\1\61\7\65\1\164\51\65\1\0\1\165\7\0"+
    "\1\165\2\0\1\165\1\57\44\0\1\66\1\56\6\0"+
    "\1\67\2\56\1\67\1\57\1\56\6\0\6\56\1\0"+
    "\3\56\1\0\14\56\5\0\1\166\1\167\7\166\1\167"+
    "\1\166\2\167\1\166\1\167\6\166\1\167\1\166\1\167"+
    "\13\166\1\167\3\166\1\167\11\166\1\61\2\163\1\0"+
    "\2\61\3\0\4\163\1\0\1\163\2\0\1\61\1\0"+
    "\1\61\1\0\4\163\1\170\1\163\1\61\3\163\1\61"+
    "\14\163\4\0\2\61\2\163\1\0\2\61\3\0\4\163"+
    "\1\0\1\163\2\0\1\61\1\0\1\61\1\0\4\163"+
    "\1\171\1\163\1\61\3\163\1\61\14\163\4\0\2\61"+
    "\2\163\1\0\2\61\3\0\4\163\1\0\1\163\2\0"+
    "\1\61\1\0\1\61\1\0\6\163\1\61\3\163\1\61"+
    "\2\163\1\172\11\163\4\0\2\61\2\163\1\0\2\61"+
    "\3\0\4\163\1\0\1\163\2\0\1\61\1\0\1\61"+
    "\1\0\1\163\1\173\4\163\1\61\3\163\1\61\14\163"+
    "\4\0\1\61\1\0\1\75\7\0\1\75\2\0\1\75"+
    "\1\0\1\174\42\0\1\61\2\163\1\0\2\61\3\0"+
    "\4\163\1\0\1\163\2\0\1\61\1\0\1\61\1\0"+
    "\5\163\1\175\1\61\3\163\1\61\14\163\4\0\2\61"+
    "\2\163\1\0\2\61\3\0\4\163\1\0\1\163\2\0"+
    "\1\61\1\0\1\61\1\0\2\163\1\170\3\163\1\61"+
    "\3\163\1\61\14\163\4\0\2\61\2\163\1\0\2\61"+
    "\3\0\4\163\1\0\1\163\2\0\1\61\1\0\1\61"+
    "\1\0\6\163\1\61\3\163\1\61\1\172\13\163\4\0"+
    "\1\61\21\176\1\102\1\103\36\176\22\177\1\106\1\200"+
    "\1\201\34\177\22\0\1\106\1\200\35\0\1\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\2\163\1\202\3\163\1\61\3\163"+
    "\1\61\14\163\4\0\2\61\2\163\1\0\2\61\3\0"+
    "\4\163\1\0\1\163\2\0\1\61\1\0\1\61\1\0"+
    "\4\163\1\203\1\163\1\61\3\163\1\61\14\163\4\0"+
    "\2\61\2\163\1\0\2\61\3\0\4\163\1\0\1\163"+
    "\2\0\1\61\1\0\1\61\1\0\6\163\1\61\2\163"+
    "\1\170\1\61\14\163\4\0\2\61\2\163\1\0\2\61"+
    "\3\0\4\163\1\0\1\163\2\0\1\61\1\0\1\61"+
    "\1\0\6\163\1\61\3\163\1\61\1\204\13\163\4\0"+
    "\2\61\2\163\1\0\2\61\3\0\4\163\1\0\1\163"+
    "\2\0\1\61\1\0\1\61\1\0\5\163\1\202\1\61"+
    "\3\163\1\61\14\163\4\0\2\61\2\163\1\0\2\61"+
    "\3\0\4\163\1\0\1\163\2\0\1\61\1\0\1\61"+
    "\1\0\6\163\1\61\3\163\1\61\2\163\1\170\11\163"+
    "\4\0\2\61\2\163\1\0\2\61\3\0\4\163\1\0"+
    "\1\163\2\0\1\61\1\0\1\61\1\0\6\163\1\61"+
    "\3\163\1\61\1\205\13\163\4\0\2\61\2\163\1\0"+
    "\2\61\3\0\4\163\1\0\1\163\2\0\1\61\1\0"+
    "\1\61\1\0\6\163\1\61\3\163\1\61\10\163\1\206"+
    "\3\163\4\0\2\61\2\163\1\0\2\61\3\0\4\163"+
    "\1\0\1\163\2\0\1\61\1\0\1\61\1\0\6\163"+
    "\1\61\1\163\1\202\1\163\1\61\14\163\4\0\2\61"+
    "\2\163\1\0\2\61\3\0\4\163\1\0\1\163\2\0"+
    "\1\61\1\0\1\61\1\0\6\163\1\61\3\163\1\61"+
    "\12\163\1\207\1\163\4\0\2\61\2\163\1\0\2\61"+
    "\3\0\4\163\1\0\1\163\2\0\1\61\1\0\1\61"+
    "\1\0\6\163\1\61\3\163\1\61\7\163\1\210\1\163"+
    "\1\211\2\163\4\0\2\61\2\163\1\0\2\61\3\0"+
    "\4\163\1\0\1\212\2\0\1\61\1\0\1\61\1\0"+
    "\6\163\1\61\3\163\1\61\14\163\4\0\2\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\6\163\1\61\3\163\1\61\11\163"+
    "\1\172\2\163\4\0\1\61\32\0\1\213\7\0\1\214"+
    "\67\0\1\215\7\0\1\61\2\163\1\0\2\61\3\0"+
    "\4\163\1\0\1\163\2\0\1\61\1\0\1\61\1\0"+
    "\5\163\1\216\1\61\3\163\1\61\2\163\1\217\11\163"+
    "\4\0\2\61\2\163\1\0\2\61\3\0\4\163\1\0"+
    "\1\163\2\0\1\61\1\0\1\61\1\0\6\163\1\61"+
    "\3\163\1\61\11\163\1\220\2\163\4\0\2\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\4\163\1\221\1\163\1\61\3\163"+
    "\1\61\14\163\4\0\1\61\32\0\1\127\57\0\1\222"+
    "\60\0\1\14\10\0\1\14\16\0\1\61\2\163\1\0"+
    "\2\61\3\0\4\163\1\0\1\163\2\0\1\61\1\0"+
    "\1\61\1\0\5\163\1\170\1\61\3\163\1\61\14\163"+
    "\4\0\2\61\2\163\1\0\2\61\3\0\4\163\1\0"+
    "\1\163\2\0\1\61\1\0\1\61\1\0\4\163\1\223"+
    "\1\163\1\61\3\163\1\61\14\163\4\0\2\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\4\163\1\202\1\163\1\61\3\163"+
    "\1\61\2\163\1\202\11\163\4\0\2\61\2\163\1\0"+
    "\2\61\3\0\4\163\1\0\1\163\2\0\1\61\1\0"+
    "\1\61\1\0\6\163\1\61\3\163\1\61\3\163\1\224"+
    "\10\163\4\0\2\61\2\163\1\0\2\61\3\0\4\163"+
    "\1\0\1\163\2\0\1\61\1\0\1\61\1\0\6\163"+
    "\1\61\3\163\1\61\6\163\1\225\5\163\4\0\2\61"+
    "\2\163\1\0\2\61\3\0\4\163\1\0\1\163\2\0"+
    "\1\61\1\0\1\61\1\0\5\163\1\226\1\61\1\227"+
    "\2\163\1\61\14\163\4\0\1\61\2\0\1\162\7\0"+
    "\2\162\2\0\1\230\6\0\6\162\1\0\3\162\1\0"+
    "\14\162\5\0\1\61\2\163\1\0\2\61\3\0\4\163"+
    "\1\0\1\231\2\0\1\61\1\0\1\61\1\0\6\163"+
    "\1\61\3\163\1\61\14\163\4\0\2\61\2\163\1\0"+
    "\2\61\3\0\4\163\1\0\1\163\2\0\1\61\1\0"+
    "\1\61\1\0\5\163\1\232\1\61\3\163\1\61\14\163"+
    "\4\0\2\61\2\163\1\0\2\61\3\0\4\163\1\0"+
    "\1\163\2\0\1\61\1\0\1\61\1\0\1\163\1\233"+
    "\4\163\1\61\3\163\1\61\14\163\4\0\2\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\5\163\1\234\1\61\3\163\1\61"+
    "\14\163\4\0\2\61\2\163\1\0\2\61\3\0\4\163"+
    "\1\0\1\163\2\0\1\61\1\0\1\61\1\0\6\163"+
    "\1\61\1\235\2\163\1\61\14\163\4\0\2\61\2\163"+
    "\1\0\2\61\3\0\4\163\1\0\1\163\2\0\1\61"+
    "\1\0\1\61\1\0\6\163\1\61\3\163\1\61\7\163"+
    "\1\236\4\163\4\0\2\61\2\163\1\0\2\61\3\0"+
    "\4\163\1\0\1\163\2\0\1\61\1\0\1\61\1\0"+
    "\3\163\1\237\2\163\1\61\1\240\2\163\1\61\14\163"+
    "\4\0\1\61\1\0\1\157\1\56\6\0\1\157\2\56"+
    "\1\157\1\0\1\241\6\0\6\56\1\0\3\56\1\0"+
    "\14\56\6\0\1\242\7\0\1\242\2\0\1\242\2\0"+
    "\1\243\34\0\1\243\5\0\1\244\7\0\1\244\2\0"+
    "\1\244\44\0\1\61\2\162\1\0\2\61\3\0\4\162"+
    "\1\0\1\162\2\0\1\61\1\0\1\61\1\0\6\162"+
    "\1\61\3\162\1\61\14\162\4\0\2\61\2\245\1\0"+
    "\2\61\3\0\4\245\1\0\1\245\2\0\1\61\1\0"+
    "\1\61\1\0\6\245\1\61\3\245\1\61\14\245\4\0"+
    "\1\61\7\65\1\246\1\64\50\65\1\0\2\166\6\0"+
    "\4\166\1\0\1\166\6\0\6\166\1\0\3\166\1\0"+
    "\14\166\6\0\1\167\1\56\6\0\1\167\1\56\2\167"+
    "\1\0\1\167\6\0\1\167\1\56\1\167\3\56\1\0"+
    "\3\56\1\0\3\56\1\167\3\56\1\167\4\56\5\0"+
    "\1\61\2\245\1\0\2\61\3\0\4\245\1\0\1\245"+
    "\2\0\1\61\1\0\1\61\1\0\6\245\1\61\3\245"+
    "\1\61\10\245\1\247\3\245\4\0\2\61\2\245\1\0"+
    "\2\61\3\0\4\245\1\0\1\250\2\0\1\61\1\0"+
    "\1\61\1\0\6\245\1\61\3\245\1\61\14\245\4\0"+
    "\2\61\2\245\1\0\2\61\3\0\4\245\1\0\1\245"+
    "\2\0\1\61\1\0\1\61\1\0\6\245\1\61\3\245"+
    "\1\61\7\245\1\251\4\245\4\0\1\61\1\0\1\252"+
    "\7\0\1\252\2\0\1\252\2\0\1\253\34\0\1\253"+
    "\4\0\1\61\2\245\1\0\2\61\3\0\4\245\1\0"+
    "\1\254\2\0\1\61\1\0\1\61\1\0\6\245\1\61"+
    "\3\245\1\61\14\245\4\0\1\61\21\176\1\102\1\0"+
    "\36\176\22\177\1\106\1\0\1\201\34\177\22\0\1\106"+
    "\36\0\1\61\2\245\1\0\2\61\3\0\4\245\1\0"+
    "\1\245\2\0\1\61\1\0\1\61\1\0\1\255\5\245"+
    "\1\61\3\245\1\61\14\245\4\0\2\61\2\245\1\0"+
    "\2\61\3\0\4\245\1\0\1\245\2\0\1\61\1\0"+
    "\1\61\1\0\3\245\1\256\2\245\1\61\3\245\1\61"+
    "\14\245\4\0\2\61\2\245\1\0\2\61\3\0\4\245"+
    "\1\0\1\245\2\0\1\61\1\0\1\61\1\0\5\245"+
    "\1\257\1\61\3\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\1\245\1\260\4\245\1\61\3\245"+
    "\1\61\14\245\4\0\2\61\2\245\1\0\2\61\3\0"+
    "\4\245\1\0\1\261\2\0\1\61\1\0\1\61\1\0"+
    "\6\245\1\61\3\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\3\245\1\262\2\245\1\61\3\245"+
    "\1\61\14\245\4\0\2\61\2\245\1\0\2\61\3\0"+
    "\4\245\1\0\1\263\2\0\1\61\1\0\1\61\1\0"+
    "\6\245\1\61\3\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\1\245\1\250\4\245\1\61\3\245"+
    "\1\61\14\245\4\0\1\61\16\0\1\264\75\0\2\265"+
    "\66\0\1\266\16\0\1\61\2\245\1\0\2\61\3\0"+
    "\4\245\1\0\1\267\2\0\1\61\1\0\1\61\1\0"+
    "\6\245\1\61\3\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\6\245\1\61\1\270\2\245\1\61"+
    "\14\245\4\0\2\61\2\245\1\0\2\61\3\0\4\245"+
    "\1\0\1\245\2\0\1\61\1\0\1\61\1\0\6\245"+
    "\1\61\3\245\1\61\2\245\1\271\11\245\4\0\2\61"+
    "\2\245\1\0\2\61\3\0\4\245\1\0\1\245\2\0"+
    "\1\61\1\0\1\61\1\0\5\245\1\272\1\61\3\245"+
    "\1\61\14\245\4\0\1\61\33\0\2\273\24\0\1\61"+
    "\2\245\1\0\2\61\3\0\4\245\1\0\1\245\2\0"+
    "\1\61\1\0\1\61\1\0\6\245\1\61\1\274\2\245"+
    "\1\61\14\245\4\0\2\61\2\245\1\0\2\61\3\0"+
    "\4\245\1\0\1\275\2\0\1\61\1\0\1\61\1\0"+
    "\6\245\1\61\3\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\6\245\1\61\1\276\2\245\1\61"+
    "\14\245\4\0\2\61\2\245\1\0\2\61\3\0\4\245"+
    "\1\0\1\245\2\0\1\61\1\0\1\61\1\0\6\245"+
    "\1\61\1\275\2\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\5\245\1\250\1\61\3\245\1\61"+
    "\14\245\4\0\2\61\2\162\1\0\2\61\3\0\4\162"+
    "\1\0\1\162\2\0\1\61\1\0\1\61\1\0\6\162"+
    "\1\61\3\162\1\277\14\162\4\0\2\61\2\245\1\0"+
    "\2\61\3\0\4\245\1\0\1\245\2\0\1\61\1\0"+
    "\1\61\1\0\6\245\1\61\3\245\1\277\1\250\13\245"+
    "\4\0\2\61\2\245\1\0\2\61\3\0\4\245\1\0"+
    "\1\245\2\0\1\61\1\0\1\61\1\0\3\245\1\250"+
    "\2\245\1\61\3\245\1\61\14\245\4\0\2\61\2\245"+
    "\1\0\2\61\3\0\4\245\1\0\1\245\2\0\1\61"+
    "\1\0\1\61\1\0\6\245\1\61\3\245\1\61\1\300"+
    "\13\245\4\0\2\61\2\245\1\0\2\61\3\0\4\245"+
    "\1\0\1\245\2\0\1\61\1\0\1\61\1\0\6\245"+
    "\1\61\3\245\1\61\1\245\1\250\12\245\4\0\2\61"+
    "\2\245\1\0\2\61\3\0\4\245\1\0\1\245\2\0"+
    "\1\61\1\0\1\61\1\0\6\245\1\61\3\245\1\61"+
    "\2\245\1\301\11\245\4\0\2\61\2\245\1\0\2\61"+
    "\3\0\4\245\1\0\1\245\2\0\1\61\1\0\1\61"+
    "\1\0\6\245\1\61\3\245\1\61\13\245\1\302\4\0"+
    "\2\61\2\245\1\0\2\61\3\0\4\245\1\0\1\245"+
    "\2\0\1\61\1\0\1\61\1\0\6\245\1\61\3\245"+
    "\1\61\7\245\1\303\4\245\4\0\2\61\2\245\1\0"+
    "\2\61\3\0\4\245\1\0\1\245\2\0\1\61\1\0"+
    "\1\61\1\0\6\245\1\61\1\245\1\304\1\245\1\61"+
    "\14\245\4\0\1\61\1\0\1\305\1\56\6\0\1\305"+
    "\2\56\1\305\1\0\1\56\1\306\5\0\6\56\1\0"+
    "\3\56\1\0\14\56\1\306\5\0\1\242\7\0\1\242"+
    "\2\0\1\242\45\0\1\244\1\56\6\0\1\244\2\56"+
    "\1\244\1\0\1\56\6\0\6\56\1\0\3\56\1\0"+
    "\14\56\5\0\1\61\2\307\1\0\2\61\3\0\4\307"+
    "\1\0\1\307\2\0\1\61\1\0\1\61\1\0\6\307"+
    "\1\61\3\307\1\61\14\307\4\0\1\61\7\65\1\246"+
    "\1\310\50\65\1\61\2\307\1\0\2\61\3\0\4\307"+
    "\1\0\1\307\2\0\1\61\1\0\1\61\1\0\1\311"+
    "\5\307\1\61\3\307\1\61\14\307\4\0\2\61\2\307"+
    "\1\0\2\61\3\0\4\307\1\0\1\307\2\0\1\61"+
    "\1\0\1\61\1\0\5\307\1\312\1\61\3\307\1\61"+
    "\14\307\4\0\1\61\1\0\1\252\7\0\1\252\2\0"+
    "\1\252\44\0\1\61\2\307\1\0\2\61\3\0\4\307"+
    "\1\0\1\307\2\0\1\61\1\0\1\61\1\0\4\307"+
    "\1\313\1\307\1\61\3\307\1\61\14\307\4\0\2\61"+
    "\2\307\1\0\2\61\3\0\4\307\1\0\1\307\2\0"+
    "\1\61\1\0\1\61\1\0\6\307\1\61\3\307\1\61"+
    "\5\307\1\314\6\307\4\0\2\61\2\307\1\0\2\61"+
    "\3\0\4\307\1\0\1\307\2\0\1\61\1\0\1\61"+
    "\1\0\6\307\1\61\3\307\1\61\2\307\1\315\11\307"+
    "\4\0\2\61\2\307\1\0\2\61\3\0\4\307\1\0"+
    "\1\307\2\0\1\61\1\0\1\61\1\0\4\307\1\316"+
    "\1\307\1\61\3\307\1\61\14\307\4\0\2\61\2\307"+
    "\1\0\2\61\3\0\4\307\1\0\1\307\2\0\1\61"+
    "\1\0\1\61\1\0\5\307\1\317\1\61\3\307\1\61"+
    "\14\307\4\0\2\61\2\307\1\0\2\61\3\0\4\307"+
    "\1\0\1\307\2\0\1\61\1\0\1\61\1\0\6\307"+
    "\1\61\3\307\1\61\7\307\1\320\4\307\4\0\2\61"+
    "\2\307\1\0\2\61\3\0\4\307\1\0\1\307\2\0"+
    "\1\61\1\0\1\61\1\0\4\307\1\321\1\307\1\61"+
    "\3\307\1\61\14\307\4\0\2\61\2\307\1\0\2\61"+
    "\3\0\4\307\1\0\1\307\2\0\1\61\1\0\1\61"+
    "\1\0\1\320\5\307\1\61\3\307\1\61\14\307\4\0"+
    "\1\61\31\0\1\322\55\0\1\323\50\0\1\324\42\0"+
    "\1\61\2\307\1\0\2\61\3\0\4\307\1\0\1\307"+
    "\2\0\1\61\1\0\1\61\1\0\4\307\1\325\1\307"+
    "\1\61\3\307\1\61\14\307\4\0\2\61\2\307\1\0"+
    "\2\61\3\0\4\307\1\0\1\307\2\0\1\61\1\0"+
    "\1\61\1\0\1\307\1\326\4\307\1\61\3\307\1\61"+
    "\14\307\4\0\2\61\2\307\1\0\2\61\3\0\4\307"+
    "\1\0\1\327\2\0\1\61\1\0\1\61\1\0\6\307"+
    "\1\61\3\307\1\61\14\307\4\0\2\61\2\307\1\0"+
    "\2\61\3\0\4\307\1\0\1\307\2\0\1\61\1\0"+
    "\1\61\1\0\6\307\1\61\3\307\1\61\4\307\1\330"+
    "\7\307\4\0\1\61\26\0\1\331\32\0\1\61\2\307"+
    "\1\0\2\61\3\0\4\307\1\0\1\307\2\0\1\61"+
    "\1\0\1\61\1\0\1\307\1\332\4\307\1\61\3\307"+
    "\1\61\14\307\4\0\2\61\2\307\1\0\2\61\3\0"+
    "\4\307\1\0\1\307\2\0\1\61\1\0\1\61\1\0"+
    "\6\307\1\61\3\307\1\61\2\307\1\314\11\307\4\0"+
    "\2\61\2\307\1\0\2\61\3\0\4\307\1\0\1\307"+
    "\2\0\1\61\1\0\1\61\1\0\1\307\1\314\4\307"+
    "\1\61\3\307\1\61\14\307\4\0\2\61\2\307\1\0"+
    "\2\61\3\0\4\307\1\0\1\307\2\0\1\61\1\0"+
    "\1\61\1\0\5\307\1\333\1\61\3\307\1\61\14\307"+
    "\4\0\2\61\2\307\1\0\2\61\3\0\4\307\1\0"+
    "\1\314\2\0\1\61\1\0\1\61\1\0\6\307\1\61"+
    "\3\307\1\61\14\307\4\0\2\61\2\307\1\0\2\61"+
    "\3\0\4\307\1\0\1\321\2\0\1\61\1\0\1\61"+
    "\1\0\6\307\1\61\3\307\1\61\14\307\4\0\2\61"+
    "\2\307\1\0\2\61\3\0\4\307\1\0\1\334\2\0"+
    "\1\61\1\0\1\61\1\0\6\307\1\61\3\307\1\61"+
    "\14\307\4\0\2\61\2\307\1\0\2\61\3\0\4\307"+
    "\1\0\1\307\2\0\1\61\1\0\1\61\1\0\1\335"+
    "\5\307\1\61\3\307\1\61\14\307\4\0\1\61\1\0"+
    "\1\305\1\56\6\0\1\305\2\56\1\305\1\0\1\56"+
    "\6\0\6\56\1\0\3\56\1\0\14\56\6\0\1\305"+
    "\7\0\1\305\2\0\1\305\44\0\1\61\2\336\1\0"+
    "\2\61\3\0\4\336\1\0\1\336\2\0\1\61\1\0"+
    "\1\61\1\0\6\336\1\61\3\336\1\61\14\336\4\0"+
    "\2\61\2\336\1\0\2\61\3\0\4\336\1\0\1\336"+
    "\2\0\1\61\1\0\1\61\1\0\4\336\1\337\1\336"+
    "\1\61\3\336\1\61\14\336\4\0\2\61\2\336\1\0"+
    "\2\61\3\0\4\336\1\0\1\336\2\0\1\61\1\0"+
    "\1\61\1\0\6\336\1\61\1\340\2\336\1\61\14\336"+
    "\4\0\2\61\2\336\1\0\2\61\3\0\4\336\1\0"+
    "\1\336\2\0\1\61\1\0\1\61\1\0\1\336\1\341"+
    "\4\336\1\61\3\336\1\61\14\336\4\0\2\61\2\336"+
    "\1\0\2\61\3\0\4\336\1\0\1\336\2\0\1\61"+
    "\1\0\1\61\1\0\6\336\1\61\3\336\1\61\4\336"+
    "\1\342\7\336\4\0\2\61\2\336\1\0\2\61\3\0"+
    "\4\336\1\0\1\336\2\0\1\61\1\0\1\61\1\0"+
    "\6\336\1\61\3\336\1\61\4\336\1\343\7\336\4\0"+
    "\2\61\2\336\1\0\2\61\3\0\4\336\1\0\1\336"+
    "\2\0\1\61\1\0\1\61\1\0\3\336\1\344\2\336"+
    "\1\61\3\336\1\61\14\336\4\0\2\61\2\336\1\0"+
    "\2\61\3\0\4\336\1\0\1\336\2\0\1\61\1\0"+
    "\1\61\1\0\5\336\1\344\1\61\3\336\1\61\14\336"+
    "\4\0\2\61\2\336\1\0\2\61\3\0\4\336\1\0"+
    "\1\336\2\0\1\61\1\0\1\61\1\0\2\336\1\344"+
    "\3\336\1\61\3\336\1\61\14\336\4\0\1\61\13\0"+
    "\1\345\15\0\1\346\45\0\1\127\100\0\1\347\22\0"+
    "\1\61\2\336\1\0\2\61\3\0\2\336\1\350\1\336"+
    "\1\0\1\336\2\0\1\61\1\0\1\61\1\0\4\336"+
    "\1\351\1\336\1\61\3\336\1\61\14\336\4\0\2\61"+
    "\2\336\1\0\2\61\3\0\4\336\1\0\1\344\2\0"+
    "\1\61\1\0\1\61\1\0\6\336\1\61\3\336\1\61"+
    "\14\336\4\0\2\61\2\336\1\0\2\61\3\0\4\336"+
    "\1\0\1\336\2\0\1\61\1\0\1\61\1\0\6\336"+
    "\1\61\2\336\1\352\1\61\14\336\4\0\2\61\2\336"+
    "\1\0\2\61\3\0\4\336\1\0\1\336\2\0\1\61"+
    "\1\0\1\61\1\0\1\353\5\336\1\61\3\336\1\61"+
    "\14\336\4\0\1\61\46\0\1\127\12\0\1\61\2\336"+
    "\1\0\2\61\3\0\4\336\1\0\1\336\2\0\1\61"+
    "\1\0\1\61\1\0\6\336\1\61\3\336\1\61\6\336"+
    "\1\344\5\336\4\0\2\61\2\336\1\0\2\61\3\0"+
    "\4\336\1\0\1\336\2\0\1\61\1\0\1\61\1\0"+
    "\4\336\1\354\1\336\1\61\3\336\1\61\14\336\4\0"+
    "\2\61\2\336\1\0\2\61\3\0\4\336\1\0\1\336"+
    "\2\0\1\61\1\0\1\61\1\0\2\336\1\355\3\336"+
    "\1\61\3\336\1\61\14\336\4\0\2\61\2\336\1\0"+
    "\2\61\3\0\4\336\1\0\1\336\2\0\1\61\1\0"+
    "\1\61\1\0\5\336\1\356\1\61\3\336\1\61\14\336"+
    "\4\0\2\61\2\357\1\0\2\61\3\0\4\357\1\0"+
    "\1\357\2\0\1\61\1\0\1\61\1\0\6\357\1\61"+
    "\3\357\1\61\14\357\4\0\2\61\2\357\1\0\2\61"+
    "\3\0\4\357\1\0\1\357\2\0\1\61\1\0\1\61"+
    "\1\0\2\357\1\360\3\357\1\61\3\357\1\61\14\357"+
    "\4\0\2\61\2\357\1\0\2\61\3\0\4\357\1\0"+
    "\1\357\2\0\1\61\1\0\1\61\1\0\3\357\1\361"+
    "\2\357\1\61\3\357\1\61\14\357\4\0\2\61\2\357"+
    "\1\0\2\61\3\0\4\357\1\0\1\357\2\0\1\61"+
    "\1\0\1\61\1\0\1\362\5\357\1\61\3\357\1\61"+
    "\14\357\4\0\2\61\2\357\1\0\2\61\3\0\4\357"+
    "\1\0\1\357\2\0\1\61\1\0\1\61\1\0\5\357"+
    "\1\363\1\61\3\357\1\61\14\357\4\0\2\61\2\357"+
    "\1\0\2\61\3\0\4\357\1\0\1\357\2\0\1\61"+
    "\1\0\1\61\1\0\6\357\1\61\3\357\1\61\7\357"+
    "\1\364\4\357\4\0\1\61\25\0\1\365\77\0\1\366"+
    "\32\0\1\367\42\0\1\61\2\357\1\0\2\61\3\0"+
    "\4\357\1\0\1\357\2\0\1\61\1\0\1\61\1\0"+
    "\1\370\5\357\1\61\3\357\1\61\14\357\4\0\2\61"+
    "\2\357\1\0\2\61\3\0\4\357\1\0\1\357\2\0"+
    "\1\61\1\0\1\61\1\0\6\357\1\61\3\357\1\61"+
    "\4\357\1\371\7\357\4\0\2\61\2\357\1\0\2\61"+
    "\3\0\4\357\1\0\1\372\2\0\1\61\1\0\1\61"+
    "\1\0\6\357\1\61\3\357\1\61\14\357\4\0\2\61"+
    "\2\357\1\0\2\61\3\0\4\357\1\0\1\357\2\0"+
    "\1\61\1\0\1\61\1\0\6\357\1\61\3\357\1\61"+
    "\2\357\1\360\11\357\4\0\2\61\2\357\1\0\2\61"+
    "\3\0\4\357\1\0\1\357\2\0\1\61\1\0\1\61"+
    "\1\0\6\357\1\61\3\357\1\61\4\357\1\373\7\357"+
    "\4\0\2\61\2\357\1\0\2\61\3\0\4\357\1\0"+
    "\1\357\2\0\1\61\1\0\1\61\1\0\6\357\1\61"+
    "\3\357\1\61\4\357\1\374\7\357\4\0\2\61\2\357"+
    "\1\0\2\61\3\0\4\357\1\0\1\360\2\0\1\61"+
    "\1\0\1\61\1\0\6\357\1\61\3\357\1\61\14\357"+
    "\4\0\2\61\2\375\1\0\2\61\3\0\4\375\1\0"+
    "\1\375\2\0\1\61\1\0\1\61\1\0\6\375\1\61"+
    "\3\375\1\61\14\375\4\0\2\61\2\375\1\0\2\61"+
    "\3\0\4\375\1\0\1\375\2\0\1\61\1\0\1\61"+
    "\1\0\1\375\1\376\4\375\1\61\3\375\1\61\14\375"+
    "\4\0\2\61\2\375\1\0\2\61\3\0\4\375\1\0"+
    "\1\375\2\0\1\61\1\0\1\61\1\0\6\375\1\61"+
    "\3\375\1\61\2\375\1\376\11\375\4\0\2\61\2\375"+
    "\1\0\2\61\3\0\4\375\1\0\1\376\2\0\1\61"+
    "\1\0\1\61\1\0\6\375\1\61\3\375\1\61\14\375"+
    "\4\0\2\61\2\375\1\0\2\61\3\0\4\375\1\0"+
    "\1\375\2\0\1\61\1\0\1\61\1\0\5\375\1\377"+
    "\1\61\3\375\1\61\14\375\4\0\1\61\47\0\1\323"+
    "\62\0\1\135\35\0\1\u0100\32\0\1\61\2\375\1\0"+
    "\2\61\3\0\4\375\1\0\1\375\2\0\1\61\1\0"+
    "\1\61\1\0\6\375\1\61\3\375\1\61\7\375\1\u0101"+
    "\4\375\4\0\2\61\2\375\1\0\2\61\3\0\4\375"+
    "\1\0\1\375\2\0\1\61\1\0\1\61\1\0\6\375"+
    "\1\61\3\375\1\61\11\375\1\u0102\2\375\4\0\2\61"+
    "\2\375\1\0\2\61\3\0\4\375\1\0\1\375\2\0"+
    "\1\61\1\0\1\61\1\0\1\375\1\u0103\4\375\1\61"+
    "\3\375\1\61\14\375\4\0\2\61\2\375\1\0\2\61"+
    "\3\0\4\375\1\0\1\375\2\0\1\61\1\0\1\61"+
    "\1\0\6\375\1\61\3\375\1\61\7\375\1\u0104\4\375"+
    "\4\0\2\61\2\375\1\0\2\61\3\0\4\375\1\0"+
    "\1\375\2\0\1\61\1\0\1\61\1\0\4\375\1\u0101"+
    "\1\375\1\61\3\375\1\61\14\375\4\0\2\61\2\u0105"+
    "\1\0\2\61\3\0\4\u0105\1\0\1\u0105\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0105\1\61\3\u0105\1\61\14\u0105"+
    "\4\0\2\61\2\u0105\1\0\2\61\3\0\4\u0105\1\0"+
    "\1\u0105\2\0\1\61\1\0\1\61\1\0\3\u0105\1\u0106"+
    "\2\u0105\1\61\3\u0105\1\61\14\u0105\4\0\1\61\32\0"+
    "\1\u0107\26\0\1\61\2\u0105\1\0\2\61\3\0\4\u0105"+
    "\1\0\1\u0108\2\0\1\61\1\0\1\61\1\0\6\u0105"+
    "\1\61\3\u0105\1\61\14\u0105\4\0\2\61\2\u0105\1\0"+
    "\2\61\3\0\4\u0105\1\0\1\u0105\2\0\1\61\1\0"+
    "\1\61\1\0\5\u0105\1\u0108\1\61\3\u0105\1\61\14\u0105"+
    "\4\0\2\61\2\u0105\1\0\2\61\3\0\4\u0105\1\0"+
    "\1\u0105\2\0\1\61\1\0\1\61\1\0\5\u0105\1\u0109"+
    "\1\61\3\u0105\1\61\14\u0105\4\0\2\61\2\u0105\1\0"+
    "\2\61\3\0\4\u0105\1\0\1\u0105\2\0\1\61\1\0"+
    "\1\61\1\0\5\u0105\1\u010a\1\61\3\u0105\1\61\14\u0105"+
    "\4\0\2\61\2\u010b\1\0\2\61\3\0\4\u010b\1\0"+
    "\1\u010b\2\0\1\61\1\0\1\61\1\0\6\u010b\1\61"+
    "\3\u010b\1\61\14\u010b\4\0\2\61\2\u010b\1\0\2\61"+
    "\3\0\4\u010b\1\0\1\u010b\2\0\1\61\1\0\1\61"+
    "\1\0\4\u010b\1\u010c\1\u010b\1\61\3\u010b\1\61\14\u010b"+
    "\4\0\1\61\25\0\1\u010d\33\0\1\61\2\u010b\1\0"+
    "\2\61\3\0\4\u010b\1\0\1\u010b\2\0\1\61\1\0"+
    "\1\61\1\0\1\u010e\5\u010b\1\61\3\u010b\1\61\14\u010b"+
    "\4\0\2\61\2\u010b\1\0\2\61\3\0\4\u010b\1\0"+
    "\1\u010b\2\0\1\61\1\0\1\61\1\0\3\u010b\1\u010f"+
    "\2\u010b\1\61\3\u010b\1\61\14\u010b\4\0\2\61\2\u0110"+
    "\1\0\2\61\3\0\4\u0110\1\0\1\u0110\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0110\1\61\3\u0110\1\61\14\u0110"+
    "\4\0\1\61\32\0\1\u0111\26\0\1\61\2\u0110\1\0"+
    "\2\61\3\0\4\u0110\1\0\1\u0110\2\0\1\61\1\0"+
    "\1\61\1\0\5\u0110\1\u0112\1\61\3\u0110\1\61\14\u0110"+
    "\4\0\2\61\2\u0110\1\0\2\61\3\0\4\u0110\1\0"+
    "\1\u0110\2\0\1\61\1\0\1\61\1\0\4\u0110\1\u0113"+
    "\1\u0110\1\61\3\u0110\1\61\14\u0110\4\0\2\61\2\u0114"+
    "\1\0\2\61\3\0\4\u0114\1\0\1\u0114\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0114\1\61\3\u0114\1\61\14\u0114"+
    "\4\0\1\61\33\0\2\u0115\24\0\1\61\2\u0114\1\0"+
    "\2\61\3\0\4\u0114\1\0\1\u0114\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0114\1\61\1\u0116\2\u0114\1\61\14\u0114"+
    "\4\0\2\61\2\u0117\1\0\2\61\3\0\4\u0117\1\0"+
    "\1\u0117\2\0\1\61\1\0\1\61\1\0\6\u0117\1\61"+
    "\3\u0117\1\61\14\u0117\4\0\1\61\30\0\1\u0118\30\0"+
    "\1\61\2\u0117\1\0\2\61\3\0\4\u0117\1\0\1\u0117"+
    "\2\0\1\61\1\0\1\61\1\0\3\u0117\1\u0119\2\u0117"+
    "\1\61\3\u0117\1\61\14\u0117\4\0\2\61\2\u011a\1\0"+
    "\2\61\3\0\4\u011a\1\0\1\u011a\2\0\1\61\1\0"+
    "\1\61\1\0\6\u011a\1\61\3\u011a\1\61\14\u011a\4\0"+
    "\1\61\26\0\1\127\32\0\1\61\2\u011a\1\0\2\61"+
    "\3\0\4\u011a\1\0\1\u011a\2\0\1\61\1\0\1\61"+
    "\1\0\1\u011a\1\u011b\4\u011a\1\61\3\u011a\1\61\14\u011a"+
    "\4\0\2\61\2\u011c\1\0\2\61\3\0\4\u011c\1\0"+
    "\1\u011c\2\0\1\61\1\0\1\61\1\0\6\u011c\1\61"+
    "\3\u011c\1\61\14\u011c\4\0\2\61\2\u011d\1\0\2\61"+
    "\3\0\4\u011d\1\0\1\u011d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u011d\1\61\3\u011d\1\61\14\u011d\4\0\2\61"+
    "\2\u011e\1\0\2\61\3\0\4\u011e\1\0\1\u011e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u011e\1\61\3\u011e\1\61"+
    "\14\u011e\4\0\2\61\2\u011f\1\0\2\61\3\0\4\u011f"+
    "\1\0\1\u011f\2\0\1\61\1\0\1\61\1\0\6\u011f"+
    "\1\61\3\u011f\1\61\14\u011f\4\0\2\61\2\u0120\1\0"+
    "\2\61\3\0\4\u0120\1\0\1\u0120\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0120\1\61\3\u0120\1\61\14\u0120\4\0"+
    "\2\61\2\u0121\1\0\2\61\3\0\4\u0121\1\0\1\u0121"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0121\1\61\3\u0121"+
    "\1\61\14\u0121\4\0\2\61\2\u0122\1\0\2\61\3\0"+
    "\4\u0122\1\0\1\u0122\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0122\1\61\3\u0122\1\61\14\u0122\4\0\2\61\2\u0123"+
    "\1\0\2\61\3\0\4\u0123\1\0\1\u0123\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0123\1\61\3\u0123\1\61\14\u0123"+
    "\4\0\2\61\2\u0124\1\0\2\61\3\0\4\u0124\1\0"+
    "\1\u0124\2\0\1\61\1\0\1\61\1\0\6\u0124\1\61"+
    "\3\u0124\1\61\14\u0124\4\0\2\61\2\u0125\1\0\2\61"+
    "\3\0\4\u0125\1\0\1\u0125\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0125\1\61\3\u0125\1\61\14\u0125\4\0\2\61"+
    "\2\u0126\1\0\2\61\3\0\4\u0126\1\0\1\u0126\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0126\1\61\3\u0126\1\61"+
    "\14\u0126\4\0\2\61\2\u0127\1\0\2\61\3\0\4\u0127"+
    "\1\0\1\u0127\2\0\1\61\1\0\1\61\1\0\6\u0127"+
    "\1\61\3\u0127\1\61\14\u0127\4\0\2\61\2\u0128\1\0"+
    "\2\61\3\0\4\u0128\1\0\1\u0128\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0128\1\61\3\u0128\1\61\14\u0128\4\0"+
    "\2\61\2\u0129\1\0\2\61\3\0\4\u0129\1\0\1\u0129"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0129\1\61\3\u0129"+
    "\1\61\14\u0129\4\0\2\61\2\u012a\1\0\2\61\3\0"+
    "\4\u012a\1\0\1\u012a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u012a\1\61\3\u012a\1\61\14\u012a\4\0\2\61\2\u012b"+
    "\1\0\2\61\3\0\4\u012b\1\0\1\u012b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u012b\1\61\3\u012b\1\61\14\u012b"+
    "\4\0\2\61\2\u012c\1\0\2\61\3\0\4\u012c\1\0"+
    "\1\u012c\2\0\1\61\1\0\1\61\1\0\6\u012c\1\61"+
    "\3\u012c\1\61\14\u012c\4\0\2\61\2\u012d\1\0\2\61"+
    "\3\0\4\u012d\1\0\1\u012d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u012d\1\61\3\u012d\1\61\14\u012d\4\0\2\61"+
    "\2\u012e\1\0\2\61\3\0\4\u012e\1\0\1\u012e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u012e\1\61\3\u012e\1\61"+
    "\14\u012e\4\0\2\61\2\u012f\1\0\2\61\3\0\4\u012f"+
    "\1\0\1\u012f\2\0\1\61\1\0\1\61\1\0\6\u012f"+
    "\1\61\3\u012f\1\61\14\u012f\4\0\2\61\2\u0130\1\0"+
    "\2\61\3\0\4\u0130\1\0\1\u0130\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0130\1\61\3\u0130\1\61\14\u0130\4\0"+
    "\2\61\2\u0131\1\0\2\61\3\0\4\u0131\1\0\1\u0131"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0131\1\61\3\u0131"+
    "\1\61\14\u0131\4\0\2\61\2\u0132\1\0\2\61\3\0"+
    "\4\u0132\1\0\1\u0132\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0132\1\61\3\u0132\1\61\14\u0132\4\0\2\61\2\u0133"+
    "\1\0\2\61\3\0\4\u0133\1\0\1\u0133\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0133\1\61\3\u0133\1\61\14\u0133"+
    "\4\0\2\61\2\u0134\1\0\2\61\3\0\4\u0134\1\0"+
    "\1\u0134\2\0\1\61\1\0\1\61\1\0\6\u0134\1\61"+
    "\3\u0134\1\61\14\u0134\4\0\2\61\2\u0135\1\0\2\61"+
    "\3\0\4\u0135\1\0\1\u0135\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0135\1\61\3\u0135\1\61\14\u0135\4\0\2\61"+
    "\2\u0136\1\0\2\61\3\0\4\u0136\1\0\1\u0136\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0136\1\61\3\u0136\1\61"+
    "\14\u0136\4\0\2\61\2\u0137\1\0\2\61\3\0\4\u0137"+
    "\1\0\1\u0137\2\0\1\61\1\0\1\61\1\0\6\u0137"+
    "\1\61\3\u0137\1\61\14\u0137\4\0\2\61\2\u0138\1\0"+
    "\2\61\3\0\4\u0138\1\0\1\u0138\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0138\1\61\3\u0138\1\61\14\u0138\4\0"+
    "\2\61\2\u0139\1\0\2\61\3\0\4\u0139\1\0\1\u0139"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0139\1\61\3\u0139"+
    "\1\61\14\u0139\4\0\2\61\2\u013a\1\0\2\61\3\0"+
    "\4\u013a\1\0\1\u013a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u013a\1\61\3\u013a\1\61\14\u013a\4\0\2\61\2\u013b"+
    "\1\0\2\61\3\0\4\u013b\1\0\1\u013b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u013b\1\61\3\u013b\1\61\14\u013b"+
    "\4\0\2\61\2\u013c\1\0\2\61\3\0\4\u013c\1\0"+
    "\1\u013c\2\0\1\61\1\0\1\61\1\0\6\u013c\1\61"+
    "\3\u013c\1\61\14\u013c\4\0\2\61\2\u013d\1\0\2\61"+
    "\3\0\4\u013d\1\0\1\u013d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u013d\1\61\3\u013d\1\61\14\u013d\4\0\2\61"+
    "\2\u013e\1\0\2\61\3\0\4\u013e\1\0\1\u013e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u013e\1\61\3\u013e\1\61"+
    "\14\u013e\4\0\2\61\2\u013f\1\0\2\61\3\0\4\u013f"+
    "\1\0\1\u013f\2\0\1\61\1\0\1\61\1\0\6\u013f"+
    "\1\61\3\u013f\1\61\14\u013f\4\0\2\61\2\u0140\1\0"+
    "\2\61\3\0\4\u0140\1\0\1\u0140\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0140\1\61\3\u0140\1\61\14\u0140\4\0"+
    "\2\61\2\u0141\1\0\2\61\3\0\4\u0141\1\0\1\u0141"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0141\1\61\3\u0141"+
    "\1\61\14\u0141\4\0\2\61\2\u0142\1\0\2\61\3\0"+
    "\4\u0142\1\0\1\u0142\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0142\1\61\3\u0142\1\61\14\u0142\4\0\2\61\2\u0143"+
    "\1\0\2\61\3\0\4\u0143\1\0\1\u0143\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0143\1\61\3\u0143\1\61\14\u0143"+
    "\4\0\2\61\2\u0144\1\0\2\61\3\0\4\u0144\1\0"+
    "\1\u0144\2\0\1\61\1\0\1\61\1\0\6\u0144\1\61"+
    "\3\u0144\1\61\14\u0144\4\0\2\61\2\u0145\1\0\2\61"+
    "\3\0\4\u0145\1\0\1\u0145\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0145\1\61\3\u0145\1\61\14\u0145\4\0\2\61"+
    "\2\u0146\1\0\2\61\3\0\4\u0146\1\0\1\u0146\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0146\1\61\3\u0146\1\61"+
    "\14\u0146\4\0\2\61\2\u0147\1\0\2\61\3\0\4\u0147"+
    "\1\0\1\u0147\2\0\1\61\1\0\1\61\1\0\6\u0147"+
    "\1\61\3\u0147\1\61\14\u0147\4\0\2\61\2\u0148\1\0"+
    "\2\61\3\0\4\u0148\1\0\1\u0148\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0148\1\61\3\u0148\1\61\14\u0148\4\0"+
    "\2\61\2\u0149\1\0\2\61\3\0\4\u0149\1\0\1\u0149"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0149\1\61\3\u0149"+
    "\1\61\14\u0149\4\0\2\61\2\u014a\1\0\2\61\3\0"+
    "\4\u014a\1\0\1\u014a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u014a\1\61\3\u014a\1\61\14\u014a\4\0\2\61\2\u014b"+
    "\1\0\2\61\3\0\4\u014b\1\0\1\u014b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u014b\1\61\3\u014b\1\61\14\u014b"+
    "\4\0\2\61\2\u014c\1\0\2\61\3\0\4\u014c\1\0"+
    "\1\u014c\2\0\1\61\1\0\1\61\1\0\6\u014c\1\61"+
    "\3\u014c\1\61\14\u014c\4\0\2\61\2\u014d\1\0\2\61"+
    "\3\0\4\u014d\1\0\1\u014d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u014d\1\61\3\u014d\1\61\14\u014d\4\0\2\61"+
    "\2\u014e\1\0\2\61\3\0\4\u014e\1\0\1\u014e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u014e\1\61\3\u014e\1\61"+
    "\14\u014e\4\0\2\61\2\u014f\1\0\2\61\3\0\4\u014f"+
    "\1\0\1\u014f\2\0\1\61\1\0\1\61\1\0\6\u014f"+
    "\1\61\3\u014f\1\61\14\u014f\4\0\2\61\2\u0150\1\0"+
    "\2\61\3\0\4\u0150\1\0\1\u0150\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0150\1\61\3\u0150\1\61\14\u0150\4\0"+
    "\2\61\2\u0151\1\0\2\61\3\0\4\u0151\1\0\1\u0151"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0151\1\61\3\u0151"+
    "\1\61\14\u0151\4\0\2\61\2\u0152\1\0\2\61\3\0"+
    "\4\u0152\1\0\1\u0152\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0152\1\61\3\u0152\1\61\14\u0152\4\0\2\61\2\u0153"+
    "\1\0\2\61\3\0\4\u0153\1\0\1\u0153\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0153\1\61\3\u0153\1\61\14\u0153"+
    "\4\0\2\61\2\u0154\1\0\2\61\3\0\4\u0154\1\0"+
    "\1\u0154\2\0\1\61\1\0\1\61\1\0\6\u0154\1\61"+
    "\3\u0154\1\61\14\u0154\4\0\2\61\2\u0155\1\0\2\61"+
    "\3\0\4\u0155\1\0\1\u0155\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0155\1\61\3\u0155\1\61\14\u0155\4\0\2\61"+
    "\2\u0156\1\0\2\61\3\0\4\u0156\1\0\1\u0156\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0156\1\61\3\u0156\1\61"+
    "\14\u0156\4\0\2\61\2\u0157\1\0\2\61\3\0\4\u0157"+
    "\1\0\1\u0157\2\0\1\61\1\0\1\61\1\0\6\u0157"+
    "\1\61\3\u0157\1\61\14\u0157\4\0\2\61\2\u0158\1\0"+
    "\2\61\3\0\4\u0158\1\0\1\u0158\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0158\1\61\3\u0158\1\61\14\u0158\4\0"+
    "\2\61\2\u0159\1\0\2\61\3\0\4\u0159\1\0\1\u0159"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0159\1\61\3\u0159"+
    "\1\61\14\u0159\4\0\2\61\2\u015a\1\0\2\61\3\0"+
    "\4\u015a\1\0\1\u015a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u015a\1\61\3\u015a\1\61\14\u015a\4\0\2\61\2\u015b"+
    "\1\0\2\61\3\0\4\u015b\1\0\1\u015b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u015b\1\61\3\u015b\1\61\14\u015b"+
    "\4\0\2\61\2\u015c\1\0\2\61\3\0\4\u015c\1\0"+
    "\1\u015c\2\0\1\61\1\0\1\61\1\0\6\u015c\1\61"+
    "\3\u015c\1\61\14\u015c\4\0\2\61\2\u015d\1\0\2\61"+
    "\3\0\4\u015d\1\0\1\u015d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u015d\1\61\3\u015d\1\61\14\u015d\4\0\2\61"+
    "\2\u015e\1\0\2\61\3\0\4\u015e\1\0\1\u015e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u015e\1\61\3\u015e\1\61"+
    "\14\u015e\4\0\2\61\2\u015f\1\0\2\61\3\0\4\u015f"+
    "\1\0\1\u015f\2\0\1\61\1\0\1\61\1\0\6\u015f"+
    "\1\61\3\u015f\1\61\14\u015f\4\0\2\61\2\u0160\1\0"+
    "\2\61\3\0\4\u0160\1\0\1\u0160\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0160\1\61\3\u0160\1\61\14\u0160\4\0"+
    "\2\61\2\u0161\1\0\2\61\3\0\4\u0161\1\0\1\u0161"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0161\1\61\3\u0161"+
    "\1\61\14\u0161\4\0\2\61\2\u0162\1\0\2\61\3\0"+
    "\4\u0162\1\0\1\u0162\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0162\1\61\3\u0162\1\61\14\u0162\4\0\2\61\2\u0163"+
    "\1\0\2\61\3\0\4\u0163\1\0\1\u0163\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0163\1\61\3\u0163\1\61\14\u0163"+
    "\4\0\2\61\2\u0164\1\0\2\61\3\0\4\u0164\1\0"+
    "\1\u0164\2\0\1\61\1\0\1\61\1\0\6\u0164\1\61"+
    "\3\u0164\1\61\14\u0164\4\0\2\61\2\u0165\1\0\2\61"+
    "\3\0\4\u0165\1\0\1\u0165\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0165\1\61\3\u0165\1\61\14\u0165\4\0\2\61"+
    "\2\u0166\1\0\2\61\3\0\4\u0166\1\0\1\u0166\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0166\1\61\3\u0166\1\61"+
    "\14\u0166\4\0\2\61\2\u0167\1\0\2\61\3\0\4\u0167"+
    "\1\0\1\u0167\2\0\1\61\1\0\1\61\1\0\6\u0167"+
    "\1\61\3\u0167\1\61\14\u0167\4\0\2\61\2\u0168\1\0"+
    "\2\61\3\0\4\u0168\1\0\1\u0168\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0168\1\61\3\u0168\1\61\14\u0168\4\0"+
    "\2\61\2\u0169\1\0\2\61\3\0\4\u0169\1\0\1\u0169"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0169\1\61\3\u0169"+
    "\1\61\14\u0169\4\0\2\61\2\u016a\1\0\2\61\3\0"+
    "\4\u016a\1\0\1\u016a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u016a\1\61\3\u016a\1\61\14\u016a\4\0\2\61\2\u016b"+
    "\1\0\2\61\3\0\4\u016b\1\0\1\u016b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u016b\1\61\3\u016b\1\61\14\u016b"+
    "\4\0\2\61\2\u016c\1\0\2\61\3\0\4\u016c\1\0"+
    "\1\u016c\2\0\1\61\1\0\1\61\1\0\6\u016c\1\61"+
    "\3\u016c\1\61\14\u016c\4\0\2\61\2\u016d\1\0\2\61"+
    "\3\0\4\u016d\1\0\1\u016d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u016d\1\61\3\u016d\1\61\14\u016d\4\0\2\61"+
    "\2\u016e\1\0\2\61\3\0\4\u016e\1\0\1\u016e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u016e\1\61\3\u016e\1\61"+
    "\14\u016e\4\0\2\61\2\u016f\1\0\2\61\3\0\4\u016f"+
    "\1\0\1\u016f\2\0\1\61\1\0\1\61\1\0\6\u016f"+
    "\1\61\3\u016f\1\61\14\u016f\4\0\2\61\2\u0170\1\0"+
    "\2\61\3\0\4\u0170\1\0\1\u0170\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0170\1\61\3\u0170\1\61\14\u0170\4\0"+
    "\2\61\2\u0171\1\0\2\61\3\0\4\u0171\1\0\1\u0171"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0171\1\61\3\u0171"+
    "\1\61\14\u0171\4\0\2\61\2\u0172\1\0\2\61\3\0"+
    "\4\u0172\1\0\1\u0172\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0172\1\61\3\u0172\1\61\14\u0172\4\0\2\61\2\u0173"+
    "\1\0\2\61\3\0\4\u0173\1\0\1\u0173\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0173\1\61\3\u0173\1\61\14\u0173"+
    "\4\0\2\61\2\u0174\1\0\2\61\3\0\4\u0174\1\0"+
    "\1\u0174\2\0\1\61\1\0\1\61\1\0\6\u0174\1\61"+
    "\3\u0174\1\61\14\u0174\4\0\2\61\2\u0175\1\0\2\61"+
    "\3\0\4\u0175\1\0\1\u0175\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0175\1\61\3\u0175\1\61\14\u0175\4\0\2\61"+
    "\2\u0176\1\0\2\61\3\0\4\u0176\1\0\1\u0176\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0176\1\61\3\u0176\1\61"+
    "\14\u0176\4\0\2\61\2\u0177\1\0\2\61\3\0\4\u0177"+
    "\1\0\1\u0177\2\0\1\61\1\0\1\61\1\0\6\u0177"+
    "\1\61\3\u0177\1\61\14\u0177\4\0\2\61\2\u0178\1\0"+
    "\2\61\3\0\4\u0178\1\0\1\u0178\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0178\1\61\3\u0178\1\61\14\u0178\4\0"+
    "\2\61\2\u0179\1\0\2\61\3\0\4\u0179\1\0\1\u0179"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0179\1\61\3\u0179"+
    "\1\61\14\u0179\4\0\2\61\2\u017a\1\0\2\61\3\0"+
    "\4\u017a\1\0\1\u017a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u017a\1\61\3\u017a\1\61\14\u017a\4\0\2\61\2\u017b"+
    "\1\0\2\61\3\0\4\u017b\1\0\1\u017b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u017b\1\61\3\u017b\1\61\14\u017b"+
    "\4\0\2\61\2\u017c\1\0\2\61\3\0\4\u017c\1\0"+
    "\1\u017c\2\0\1\61\1\0\1\61\1\0\6\u017c\1\61"+
    "\3\u017c\1\61\14\u017c\4\0\2\61\2\u017d\1\0\2\61"+
    "\3\0\4\u017d\1\0\1\u017d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u017d\1\61\3\u017d\1\61\14\u017d\4\0\2\61"+
    "\2\u017e\1\0\2\61\3\0\4\u017e\1\0\1\u017e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u017e\1\61\3\u017e\1\61"+
    "\14\u017e\4\0\2\61\2\u017f\1\0\2\61\3\0\4\u017f"+
    "\1\0\1\u017f\2\0\1\61\1\0\1\61\1\0\6\u017f"+
    "\1\61\3\u017f\1\61\14\u017f\4\0\2\61\2\u0180\1\0"+
    "\2\61\3\0\4\u0180\1\0\1\u0180\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0180\1\61\3\u0180\1\61\14\u0180\4\0"+
    "\2\61\2\u0181\1\0\2\61\3\0\4\u0181\1\0\1\u0181"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0181\1\61\3\u0181"+
    "\1\61\14\u0181\4\0\2\61\2\u0182\1\0\2\61\3\0"+
    "\4\u0182\1\0\1\u0182\2\0\1\61\1\0\1\61\1\0"+
    "\6\u0182\1\61\3\u0182\1\61\14\u0182\4\0\2\61\2\u0183"+
    "\1\0\2\61\3\0\4\u0183\1\0\1\u0183\2\0\1\61"+
    "\1\0\1\61\1\0\6\u0183\1\61\3\u0183\1\61\14\u0183"+
    "\4\0\2\61\2\u0184\1\0\2\61\3\0\4\u0184\1\0"+
    "\1\u0184\2\0\1\61\1\0\1\61\1\0\6\u0184\1\61"+
    "\3\u0184\1\61\14\u0184\4\0\2\61\2\u0185\1\0\2\61"+
    "\3\0\4\u0185\1\0\1\u0185\2\0\1\61\1\0\1\61"+
    "\1\0\6\u0185\1\61\3\u0185\1\61\14\u0185\4\0\2\61"+
    "\2\u0186\1\0\2\61\3\0\4\u0186\1\0\1\u0186\2\0"+
    "\1\61\1\0\1\61\1\0\6\u0186\1\61\3\u0186\1\61"+
    "\14\u0186\4\0\2\61\2\u0187\1\0\2\61\3\0\4\u0187"+
    "\1\0\1\u0187\2\0\1\61\1\0\1\61\1\0\6\u0187"+
    "\1\61\3\u0187\1\61\14\u0187\4\0\2\61\2\u0188\1\0"+
    "\2\61\3\0\4\u0188\1\0\1\u0188\2\0\1\61\1\0"+
    "\1\61\1\0\6\u0188\1\61\3\u0188\1\61\14\u0188\4\0"+
    "\2\61\2\u0189\1\0\2\61\3\0\4\u0189\1\0\1\u0189"+
    "\2\0\1\61\1\0\1\61\1\0\6\u0189\1\61\3\u0189"+
    "\1\61\14\u0189\4\0\2\61\2\u018a\1\0\2\61\3\0"+
    "\4\u018a\1\0\1\u018a\2\0\1\61\1\0\1\61\1\0"+
    "\6\u018a\1\61\3\u018a\1\61\14\u018a\4\0\2\61\2\u018b"+
    "\1\0\2\61\3\0\4\u018b\1\0\1\u018b\2\0\1\61"+
    "\1\0\1\61\1\0\6\u018b\1\61\3\u018b\1\61\14\u018b"+
    "\4\0\2\61\2\u018c\1\0\2\61\3\0\4\u018c\1\0"+
    "\1\u018c\2\0\1\61\1\0\1\61\1\0\6\u018c\1\61"+
    "\3\u018c\1\61\14\u018c\4\0\2\61\2\u018d\1\0\2\61"+
    "\3\0\4\u018d\1\0\1\u018d\2\0\1\61\1\0\1\61"+
    "\1\0\6\u018d\1\61\3\u018d\1\61\14\u018d\4\0\2\61"+
    "\2\u018e\1\0\2\61\3\0\4\u018e\1\0\1\u018e\2\0"+
    "\1\61\1\0\1\61\1\0\6\u018e\1\61\3\u018e\1\61"+
    "\14\u018e\4\0\1\61";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18081];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\6\1\1\11\44\1\1\0\1\1\1\0"+
    "\1\11\1\0\13\1\1\0\2\11\2\0\1\11\1\0"+
    "\17\1\1\11\1\1\1\0\3\1\3\0\6\1\1\0"+
    "\7\1\1\11\1\1\2\0\2\1\2\0\6\1\1\0"+
    "\1\1\2\0\1\11\1\0\11\1\3\0\4\1\1\0"+
    "\20\1\2\0\1\1\1\0\4\1\1\0\10\1\3\0"+
    "\4\1\1\0\12\1\1\0\13\1\3\0\4\1\1\0"+
    "\13\1\3\0\15\1\3\0\10\1\1\0\6\1\1\0"+
    "\5\1\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\164\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[398];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return YYEOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { TokenCollector.addError("ERROR_LEXICO", yytext(), yyline+1);
            } 
            // fall through
          case 21: break;
          case 2: 
            { TokenCollector.add("LITERAL_ENTERO", yytext(), yyline+1);
            } 
            // fall through
          case 22: break;
          case 3: 
            { TokenCollector.add("IDENTIFICADOR", yytext(), yyline+1);
            } 
            // fall through
          case 23: break;
          case 4: 
            { /* ignore */
            } 
            // fall through
          case 24: break;
          case 5: 
            { TokenCollector.add("OPERADOR", yytext(), yyline+1);
            } 
            // fall through
          case 25: break;
          case 6: 
            { TokenCollector.addError("ERROR_LEXICO_NUM_SEGUIDO_POR_TEXTO", yytext(), yyline+1);
            } 
            // fall through
          case 26: break;
          case 7: 
            { TokenCollector.addError("ERROR_LEXICO_REAL_PUNTO_COLA",  yytext(), yyline+1);
            } 
            // fall through
          case 27: break;
          case 8: 
            { TokenCollector.addError("ERROR_LEXICO_OCTAL_INVALIDO",     yytext(), yyline+1);
            } 
            // fall through
          case 28: break;
          case 9: 
            { TokenCollector.add("LITERAL_OCTAL",  yytext(), yyline+1);
            } 
            // fall through
          case 29: break;
          case 10: 
            { TokenCollector.addError("ERROR_LEXICO_REAL_PUNTO_LIDER", yytext(), yyline+1);
            } 
            // fall through
          case 30: break;
          case 11: 
            { TokenCollector.add("LITERAL_STRING", yytext(), yyline+1);
            } 
            // fall through
          case 31: break;
          case 12: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 1;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { TokenCollector.addError("ERROR_STRING_SIN_CIERRE", yytext(), yyline+1);
            } 
            // fall through
          case 32: break;
          case 13: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 3;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 2;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { TokenCollector.addError("ERROR_CHAR_SIN_CIERRE",   yytext(), yyline+1);
            } 
            // fall through
          case 33: break;
          case 14: 
            { TokenCollector.add("PALABRA_RESERVADA", yytext(), yyline+1);
            } 
            // fall through
          case 34: break;
          case 15: 
            { TokenCollector.add("LITERAL_REAL",   yytext(), yyline+1);
            } 
            // fall through
          case 35: break;
          case 16: 
            { TokenCollector.addError("ERROR_IDENTIFICADOR_SIMBOLO_ILEGAL", yytext(), yyline+1);
            } 
            // fall through
          case 36: break;
          case 17: 
            { TokenCollector.addError("ERROR_LEXICO_HEXADECIMAL_INVALIDO", yytext(), yyline+1);
            } 
            // fall through
          case 37: break;
          case 18: 
            { TokenCollector.add("LITERAL_HEX",    yytext(), yyline+1);
            } 
            // fall through
          case 38: break;
          case 19: 
            { TokenCollector.add("LITERAL_CHAR",   yytext(), yyline+1);
            } 
            // fall through
          case 39: break;
          case 20: 
            { TokenCollector.addError("ERROR_IDENTIFICADOR_LONGITUD", yytext(), yyline+1);
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
